{"version":3,"file":"static/js/1332.0d2b9318.chunk.js","mappings":"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","sources":["components/TokenSafety/TokenSafetyMessage.tsx","graphql/data/pools/usePoolsFromTokenAddress.ts","components/Tokens/TokenDetails/tables/TokenDetailsPoolsTable.tsx","graphql/data/useTokenTransactions.ts","components/Tokens/TokenDetails/tables/TransactionsTable.tsx","components/Tokens/TokenDetails/ActivitySection.tsx","components/Tokens/TokenDetails/BalanceSummary.tsx","components/Tokens/TokenDetails/MobileBalanceSummaryFooter.tsx","components/Tokens/TokenDetails/TokenDescription.tsx","components/Tokens/TokenDetails/index.tsx","assets/svg/eye.svg","components/Tokens/TokenDetails/InvalidTokenDetails.tsx","pages/TokenDetails/utils.ts","pages/TokenDetails/index.tsx","utils/addressesAreEquivalent.ts"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport { displayWarningLabel, getWarningCopy, TOKEN_SAFETY_ARTICLE, Warning } from 'constants/tokenSafety'\nimport { useTokenWarningColor, useTokenWarningTextColor } from 'hooks/useTokenWarningColor'\nimport { AlertTriangle, Slash } from 'react-feather'\nimport { Text } from 'rebass'\nimport styled from 'styled-components'\nimport { ExternalLink } from 'theme/components'\n\nconst Label = styled.div<{ color: string; backgroundColor: string }>`\n  width: 100%;\n  padding: 12px 20px 16px;\n  background-color: ${({ backgroundColor }) => backgroundColor};\n  border-radius: 16px;\n  border: 1px solid ${({ theme }) => theme.surface3};\n  color: ${({ color }) => color};\n`\n\nconst TitleRow = styled.div`\n  align-items: center;\n  font-weight: 535;\n  display: inline-flex;\n`\n\nconst Title = styled(Text)`\n  font-weight: 535;\n  font-size: 16px;\n  line-height: 24px;\n  margin-left: 7px;\n`\n\nconst DetailsRow = styled.div`\n  margin-top: 8px;\n  font-size: 12px;\n  line-height: 16px;\n  color: ${({ theme }) => theme.neutral2};\n`\n\nconst StyledLink = styled(ExternalLink)`\n  color: ${({ theme }) => theme.accent1};\n\n  font-weight: 535;\n`\n\ntype TokenSafetyMessageProps = {\n  warning: Warning\n  tokenAddress: string\n  plural?: boolean\n  tokenSymbol?: string\n}\n\nexport default function TokenSafetyMessage({\n  warning,\n  tokenAddress,\n  plural = false,\n  tokenSymbol,\n}: TokenSafetyMessageProps) {\n  const backgroundColor = useTokenWarningColor(warning.level)\n  const textColor = useTokenWarningTextColor(warning.level)\n  const { heading, description } = getWarningCopy(warning, plural, tokenSymbol)\n\n  return (\n    <Label data-cy=\"token-safety-message\" color={textColor} backgroundColor={backgroundColor}>\n      {displayWarningLabel(warning) && (\n        <TitleRow>\n          {warning.canProceed ? <AlertTriangle size=\"16px\" /> : <Slash size=\"16px\" />}\n          <Title marginLeft=\"7px\">{warning.message}</Title>\n        </TitleRow>\n      )}\n\n      <DetailsRow>\n        {heading}\n        {Boolean(heading) && ' '}\n        {description}\n        {Boolean(description) && ' '}\n        {tokenAddress && (\n          <StyledLink href={TOKEN_SAFETY_ARTICLE}>\n            <Trans>Learn more</Trans>\n          </StyledLink>\n        )}\n      </DetailsRow>\n    </Label>\n  )\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport { useTopV2PairsQuery, useTopV3PoolsQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { PoolTableSortState, TablePool, V2_BIPS, calculateTurnover, sortPools } from 'graphql/data/pools/useTopPools'\nimport { chainIdToBackendName } from 'graphql/data/util'\nimport { useCallback, useMemo, useRef } from 'react'\n\nconst DEFAULT_QUERY_SIZE = 20\n\nexport function usePoolsFromTokenAddress(tokenAddress: string, sortState: PoolTableSortState, chainId?: ChainId) {\n  const {\n    loading: loadingV3,\n    error: errorV3,\n    data: dataV3,\n    fetchMore: fetchMoreV3,\n  } = useTopV3PoolsQuery({\n    variables: {\n      first: DEFAULT_QUERY_SIZE,\n      tokenAddress,\n      chain: chainIdToBackendName(chainId),\n    },\n  })\n\n  const {\n    loading: loadingV2,\n    error: errorV2,\n    data: dataV2,\n    fetchMore: fetchMoreV2,\n  } = useTopV2PairsQuery({\n    variables: {\n      first: DEFAULT_QUERY_SIZE,\n      tokenAddress,\n    },\n    skip: chainId !== ChainId.MAINNET,\n  })\n  const loading = loadingV3 || loadingV2\n  const error = errorV3 || errorV2\n\n  const loadingMoreV3 = useRef(false)\n  const loadingMoreV2 = useRef(false)\n  const sizeRef = useRef(DEFAULT_QUERY_SIZE)\n  const loadMore = useCallback(\n    ({ onComplete }: { onComplete?: () => void }) => {\n      if (loadingMoreV3.current || (loadingMoreV2.current && chainId === ChainId.MAINNET)) {\n        return\n      }\n      loadingMoreV3.current = true\n      loadingMoreV2.current = true\n      sizeRef.current += DEFAULT_QUERY_SIZE\n      fetchMoreV3({\n        variables: {\n          cursor: dataV3?.topV3Pools?.[dataV3.topV3Pools.length - 1]?.totalLiquidity?.value,\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult || !prev || !Object.keys(prev).length) return prev\n          if (!loadingMoreV2.current || chainId !== ChainId.MAINNET) onComplete?.()\n          const mergedData = {\n            topV3Pools: [...(prev.topV3Pools ?? []).slice(), ...(fetchMoreResult.topV3Pools ?? []).slice()],\n          }\n          loadingMoreV3.current = false\n          return mergedData\n        },\n      })\n      chainId === ChainId.MAINNET &&\n        fetchMoreV2({\n          variables: {\n            cursor: dataV2?.topV2Pairs?.[dataV2.topV2Pairs.length - 1]?.totalLiquidity?.value,\n          },\n          updateQuery: (prev, { fetchMoreResult }) => {\n            if (!fetchMoreResult || !prev || !Object.keys(prev).length) return prev\n            if (!loadingMoreV3.current) onComplete?.()\n            const mergedData = {\n              topV2Pairs: [...(prev.topV2Pairs ?? []).slice(), ...(fetchMoreResult.topV2Pairs ?? []).slice()],\n            }\n            loadingMoreV2.current = false\n            return mergedData\n          },\n        })\n    },\n    [chainId, dataV2?.topV2Pairs, dataV3?.topV3Pools, fetchMoreV2, fetchMoreV3]\n  )\n\n  return useMemo(() => {\n    const topV3Pools: TablePool[] =\n      dataV3?.topV3Pools?.map((pool) => {\n        return {\n          hash: pool.address,\n          token0: pool.token0,\n          token1: pool.token1,\n          txCount: pool.txCount,\n          tvl: pool.totalLiquidity?.value,\n          volume24h: pool.volume24h?.value,\n          volumeWeek: pool.volumeWeek?.value,\n          turnover: calculateTurnover(pool.volume24h?.value, pool.totalLiquidity?.value, pool.feeTier),\n          feeTier: pool.feeTier,\n          protocolVersion: pool.protocolVersion,\n        } as TablePool\n      }) ?? []\n    const topV2Pairs: TablePool[] =\n      dataV2?.topV2Pairs?.map((pool) => {\n        return {\n          hash: pool.address,\n          token0: pool.token0,\n          token1: pool.token1,\n          txCount: pool.txCount,\n          tvl: pool.totalLiquidity?.value,\n          volume24h: pool.volume24h?.value,\n          volumeWeek: pool.volumeWeek?.value,\n          turnover: calculateTurnover(pool.volume24h?.value, pool.totalLiquidity?.value, V2_BIPS),\n          feeTier: V2_BIPS,\n          protocolVersion: pool.protocolVersion,\n        } as TablePool\n      }) ?? []\n\n    const pools = sortPools([...topV3Pools, ...topV2Pairs], sortState).slice(0, sizeRef.current)\n    return { loading, error, pools, loadMore }\n  }, [dataV2?.topV2Pairs, dataV3?.topV3Pools, error, loadMore, loading, sortState])\n}\n","import { ChainId, Token } from '@uniswap/sdk-core'\nimport { PoolTableColumns, PoolsTable, sortAscendingAtom, sortMethodAtom } from 'components/Pools/PoolTable/PoolTable'\nimport { usePoolsFromTokenAddress } from 'graphql/data/pools/usePoolsFromTokenAddress'\nimport { OrderDirection } from 'graphql/data/util'\nimport { useAtomValue, useResetAtom } from 'jotai/utils'\nimport { useEffect, useMemo } from 'react'\n\nconst HIDDEN_COLUMNS = [PoolTableColumns.Transactions]\n\nexport function TokenDetailsPoolsTable({ chainId, referenceToken }: { chainId: ChainId; referenceToken: Token }) {\n  const sortMethod = useAtomValue(sortMethodAtom)\n  const sortAscending = useAtomValue(sortAscendingAtom)\n  const sortState = useMemo(\n    () => ({ sortBy: sortMethod, sortDirection: sortAscending ? OrderDirection.Asc : OrderDirection.Desc }),\n    [sortAscending, sortMethod]\n  )\n  const { pools, loading, error, loadMore } = usePoolsFromTokenAddress(referenceToken.address, sortState, chainId)\n\n  const resetSortMethod = useResetAtom(sortMethodAtom)\n  const resetSortAscending = useResetAtom(sortAscendingAtom)\n  useEffect(() => {\n    resetSortMethod()\n    resetSortAscending()\n  }, [resetSortAscending, resetSortMethod])\n\n  return (\n    <div data-testid={`tdp-pools-table-${referenceToken.address.toLowerCase()}`}>\n      <PoolsTable\n        pools={pools}\n        loading={loading}\n        error={error}\n        chainId={chainId}\n        maxHeight={600}\n        hiddenColumns={HIDDEN_COLUMNS}\n        loadMore={loadMore}\n      />\n    </div>\n  )\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport {\n  Chain,\n  PoolTransactionType,\n  useV2TokenTransactionsQuery,\n  useV3TokenTransactionsQuery,\n} from 'graphql/data/__generated__/types-and-hooks'\nimport { chainIdToBackendName } from 'graphql/data/util'\nimport { useCallback, useMemo, useRef } from 'react'\n\nexport enum TokenTransactionType {\n  BUY = 'Buy',\n  SELL = 'Sell',\n}\n\nconst TokenTransactionDefaultQuerySize = 25\n\nexport function useTokenTransactions(\n  address: string,\n  chainId: ChainId,\n  filter: TokenTransactionType[] = [TokenTransactionType.BUY, TokenTransactionType.SELL]\n) {\n  const {\n    data: dataV3,\n    loading: loadingV3,\n    fetchMore: fetchMoreV3,\n    error: errorV3,\n  } = useV3TokenTransactionsQuery({\n    variables: {\n      address: address.toLowerCase(),\n      chain: chainIdToBackendName(chainId),\n      first: TokenTransactionDefaultQuerySize,\n    },\n  })\n  const {\n    data: dataV2,\n    loading: loadingV2,\n    error: errorV2,\n    fetchMore: fetchMoreV2,\n  } = useV2TokenTransactionsQuery({\n    variables: {\n      address: address.toLowerCase(),\n      first: TokenTransactionDefaultQuerySize,\n    },\n    skip: chainId !== ChainId.MAINNET,\n  })\n  const loadingMoreV3 = useRef(false)\n  const loadingMoreV2 = useRef(false)\n  const querySizeRef = useRef(TokenTransactionDefaultQuerySize)\n  const loadMore = useCallback(\n    ({ onComplete }: { onComplete?: () => void }) => {\n      if (loadingMoreV3.current || (loadingMoreV2.current && chainId === ChainId.MAINNET)) {\n        return\n      }\n      loadingMoreV3.current = true\n      loadingMoreV2.current = true\n      querySizeRef.current += TokenTransactionDefaultQuerySize\n      fetchMoreV3({\n        variables: {\n          cursor: dataV3?.token?.v3Transactions?.[dataV3.token?.v3Transactions.length - 1]?.timestamp,\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) {\n            return prev\n          }\n          if (!loadingMoreV2.current || chainId !== ChainId.MAINNET) onComplete?.()\n          const mergedData = {\n            token: {\n              ...prev.token,\n              id: prev?.token?.id ?? '',\n              chain: prev?.token?.chain ?? Chain.Ethereum,\n              v3Transactions: [...(prev.token?.v3Transactions ?? []), ...(fetchMoreResult.token?.v3Transactions ?? [])],\n            },\n          }\n          loadingMoreV3.current = false\n          return mergedData\n        },\n      })\n      chainId == ChainId.MAINNET &&\n        fetchMoreV2({\n          variables: {\n            cursor: dataV2?.token?.v2Transactions?.[dataV2.token?.v2Transactions.length - 1]?.timestamp,\n          },\n          updateQuery: (prev, { fetchMoreResult }) => {\n            if (!fetchMoreResult) return prev\n            if (!loadingMoreV3.current) onComplete?.()\n            const mergedData = {\n              token: {\n                ...prev.token,\n                id: prev?.token?.id ?? '',\n                chain: prev?.token?.chain ?? Chain.Ethereum,\n                v2Transactions: [\n                  ...(prev.token?.v2Transactions ?? []),\n                  ...(fetchMoreResult.token?.v2Transactions ?? []),\n                ],\n              },\n            }\n            loadingMoreV2.current = false\n            return mergedData\n          },\n        })\n    },\n    [chainId, dataV2?.token?.v2Transactions, dataV3?.token?.v3Transactions, fetchMoreV2, fetchMoreV3]\n  )\n\n  const transactions = useMemo(\n    () =>\n      [\n        ...(dataV3?.token?.v3Transactions?.filter((tx) => {\n          const tokenBeingSold = parseFloat(tx.token0Quantity) < 0 ? tx.token0 : tx.token1\n          const isSell = tokenBeingSold.address?.toLowerCase() === address.toLowerCase()\n          return (\n            tx.type === PoolTransactionType.Swap &&\n            filter.includes(isSell ? TokenTransactionType.SELL : TokenTransactionType.BUY)\n          )\n        }) ?? []),\n        ...(dataV2?.token?.v2Transactions?.filter((tx) => {\n          const tokenBeingSold = parseFloat(tx.token0Quantity) < 0 ? tx.token0 : tx.token1\n          const isSell = tokenBeingSold.address?.toLowerCase() === address.toLowerCase()\n          return (\n            tx.type === PoolTransactionType.Swap &&\n            filter.includes(isSell ? TokenTransactionType.SELL : TokenTransactionType.BUY)\n          )\n        }) ?? []),\n      ]\n        .sort((a, b) => b.timestamp - a.timestamp)\n        .slice(0, querySizeRef.current),\n    [address, dataV2?.token?.v2Transactions, dataV3?.token?.v3Transactions, filter]\n  )\n\n  return useMemo(() => {\n    return {\n      transactions,\n      loading: loadingV3 || loadingV2,\n      loadMore,\n      error: errorV2 || errorV3,\n    }\n  }, [transactions, loadingV3, loadingV2, loadMore, errorV2, errorV3])\n}\n","import { Trans } from '@lingui/macro'\nimport { createColumnHelper } from '@tanstack/react-table'\nimport { ChainId, Token } from '@uniswap/sdk-core'\nimport Row from 'components/Row'\nimport { Table } from 'components/Table'\nimport { Cell } from 'components/Table/Cell'\nimport { Filter } from 'components/Table/Filter'\nimport {\n  FilterHeaderRow,\n  HeaderArrow,\n  HeaderSortText,\n  StyledExternalLink,\n  TimestampCell,\n  TokenLinkCell,\n} from 'components/Table/styled'\nimport { Token as GQLToken } from 'graphql/data/__generated__/types-and-hooks'\nimport { TokenTransactionType, useTokenTransactions } from 'graphql/data/useTokenTransactions'\nimport { unwrapToken } from 'graphql/data/util'\nimport { OrderDirection, Swap_OrderBy } from 'graphql/thegraph/__generated__/types-and-hooks'\nimport { useActiveLocalCurrency } from 'hooks/useActiveLocalCurrency'\nimport { useMemo, useReducer, useState } from 'react'\nimport styled from 'styled-components'\nimport { EllipsisStyle, ThemedText } from 'theme/components'\nimport { shortenAddress } from 'utilities/src/addresses'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nconst StyledSwapAmount = styled(ThemedText.BodyPrimary)`\n  display: inline-block;\n  ${EllipsisStyle}\n  max-width: 75px;\n`\n\nconst TableWrapper = styled.div`\n  min-height: 158px;\n`\ninterface SwapTransaction {\n  hash: string\n  timestamp: number\n  input: SwapLeg\n  output: SwapLeg\n  usdValue: number\n  makerAddress: string\n}\n\ninterface SwapLeg {\n  address?: string\n  symbol?: string\n  amount: number\n  token: GQLToken\n}\n\ntype TokenTxTableSortState = {\n  sortBy: Swap_OrderBy\n  sortDirection: OrderDirection\n}\n\nexport function TransactionsTable({ chainId, referenceToken }: { chainId: ChainId; referenceToken: Token }) {\n  const activeLocalCurrency = useActiveLocalCurrency()\n  const { formatNumber, formatFiatPrice } = useFormatter()\n  const [filterModalIsOpen, toggleFilterModal] = useReducer((s) => !s, false)\n  const [filter, setFilters] = useState<TokenTransactionType[]>([TokenTransactionType.BUY, TokenTransactionType.SELL])\n  const [sortState] = useState<TokenTxTableSortState>({\n    sortBy: Swap_OrderBy.Timestamp,\n    sortDirection: OrderDirection.Desc,\n  })\n  const { transactions, loading, loadMore, error } = useTokenTransactions(referenceToken.address, chainId, filter)\n  const unwrappedReferenceToken = unwrapToken(chainId, referenceToken)\n\n  const data = useMemo(\n    () =>\n      transactions.map((transaction) => {\n        const swapLeg0 = {\n          address: transaction.token0.address,\n          symbol: transaction.token0.symbol,\n          amount: parseFloat(transaction.token0Quantity),\n          token: transaction.token0,\n        }\n        const swapLeg1 = {\n          address: transaction.token1.address,\n          symbol: transaction.token1.symbol,\n          amount: parseFloat(transaction.token1Quantity),\n          token: transaction.token1,\n        }\n        const token0IsBeingSold = parseFloat(transaction.token0Quantity) < 0\n        return {\n          hash: transaction.hash,\n          timestamp: transaction.timestamp,\n          input: token0IsBeingSold ? swapLeg0 : swapLeg1,\n          output: token0IsBeingSold ? swapLeg1 : swapLeg0,\n          usdValue: transaction.usdValue.value,\n          makerAddress: transaction.account,\n        }\n      }),\n    [transactions]\n  )\n\n  const showLoadingSkeleton = loading || !!error\n  // TODO(WEB-3236): once GQL BE Transaction query is supported add usd, token0 amount, and token1 amount sort support\n  const columns = useMemo(() => {\n    const columnHelper = createColumnHelper<SwapTransaction>()\n    return [\n      columnHelper.accessor((row) => row, {\n        id: 'timestamp',\n        header: () => (\n          <Cell minWidth={120} justifyContent=\"flex-start\" grow>\n            <Row gap=\"xs\">\n              {sortState.sortBy === Swap_OrderBy.Timestamp && <HeaderArrow direction={sortState.sortDirection} />}\n              <HeaderSortText $active={sortState.sortBy === Swap_OrderBy.Timestamp}>\n                <Trans>Time</Trans>\n              </HeaderSortText>\n            </Row>\n          </Cell>\n        ),\n        cell: (row) => (\n          <Cell loading={showLoadingSkeleton} minWidth={120} justifyContent=\"flex-start\" grow>\n            <TimestampCell\n              timestamp={Number(row.getValue?.().timestamp)}\n              link={getExplorerLink(chainId, row.getValue?.().hash, ExplorerDataType.TRANSACTION)}\n            />\n          </Cell>\n        ),\n      }),\n      columnHelper.accessor((row) => row.output.address, {\n        id: 'swap-type',\n        header: () => (\n          <Cell minWidth={75} justifyContent=\"flex-start\" grow>\n            <FilterHeaderRow modalOpen={filterModalIsOpen} onClick={toggleFilterModal}>\n              <Filter\n                allFilters={Object.values(TokenTransactionType)}\n                activeFilter={filter}\n                setFilters={setFilters}\n                isOpen={filterModalIsOpen}\n                toggleFilterModal={toggleFilterModal}\n              />\n              <ThemedText.BodySecondary>\n                <Trans>Type</Trans>\n              </ThemedText.BodySecondary>\n            </FilterHeaderRow>\n          </Cell>\n        ),\n        cell: (outputTokenAddress) => {\n          const isBuy = String(outputTokenAddress.getValue?.()).toLowerCase() === referenceToken.address.toLowerCase()\n          return (\n            <Cell loading={showLoadingSkeleton} minWidth={75} justifyContent=\"flex-start\" grow>\n              <ThemedText.BodyPrimary color={isBuy ? 'success' : 'critical'}>\n                {isBuy ? <Trans>Buy</Trans> : <Trans>Sell</Trans>}\n              </ThemedText.BodyPrimary>\n            </Cell>\n          )\n        },\n      }),\n      columnHelper.accessor(\n        (row) =>\n          row.input.address?.toLowerCase() === referenceToken.address.toLowerCase()\n            ? row.input.amount\n            : row.output.amount,\n        {\n          id: 'reference-amount',\n          header: () => (\n            <Cell minWidth={100} justifyContent=\"flex-end\">\n              <ThemedText.BodySecondary>${unwrappedReferenceToken.symbol}</ThemedText.BodySecondary>\n            </Cell>\n          ),\n          cell: (inputTokenAmount) => (\n            <Cell loading={showLoadingSkeleton} minWidth={100} justifyContent=\"flex-end\">\n              <ThemedText.BodyPrimary>\n                {formatNumber({\n                  input: Math.abs(inputTokenAmount.getValue?.()) || 0,\n                })}\n              </ThemedText.BodyPrimary>\n            </Cell>\n          ),\n        }\n      ),\n      columnHelper.accessor(\n        (row) => {\n          const nonReferenceSwapLeg =\n            row.input.address?.toLowerCase() === referenceToken.address.toLowerCase() ? row.output : row.input\n          return (\n            <Row gap=\"8px\" justify=\"flex-end\">\n              <StyledSwapAmount>\n                {formatNumber({\n                  input: Math.abs(nonReferenceSwapLeg.amount) || 0,\n                })}\n              </StyledSwapAmount>\n              <TokenLinkCell token={nonReferenceSwapLeg.token} />\n            </Row>\n          )\n        },\n        {\n          id: 'non-reference-amount',\n          header: () => (\n            <Cell minWidth={160} justifyContent=\"flex-end\">\n              <ThemedText.BodySecondary>\n                <Trans>For</Trans>\n              </ThemedText.BodySecondary>\n            </Cell>\n          ),\n          cell: (swapOutput) => (\n            <Cell loading={showLoadingSkeleton} minWidth={160} justifyContent=\"flex-end\">\n              {swapOutput.getValue?.()}\n            </Cell>\n          ),\n        }\n      ),\n      columnHelper.accessor((row) => row.usdValue, {\n        id: 'fiat-value',\n        header: () => (\n          <Cell minWidth={125} justifyContent=\"flex-end\">\n            <Row gap=\"xs\" justify=\"flex-end\">\n              {sortState.sortBy === Swap_OrderBy.AmountUsd && <HeaderArrow direction={sortState.sortDirection} />}\n              <HeaderSortText $active={sortState.sortBy === Swap_OrderBy.AmountUsd}>\n                {activeLocalCurrency}\n              </HeaderSortText>\n            </Row>\n          </Cell>\n        ),\n        cell: (fiat) => (\n          <Cell loading={showLoadingSkeleton} minWidth={125} justifyContent=\"flex-end\">\n            <ThemedText.BodyPrimary>{formatFiatPrice({ price: fiat.getValue?.() })}</ThemedText.BodyPrimary>\n          </Cell>\n        ),\n      }),\n      columnHelper.accessor((row) => row.makerAddress, {\n        id: 'maker-address',\n        header: () => (\n          <Cell minWidth={150} justifyContent=\"flex-end\">\n            <ThemedText.BodySecondary>\n              <Trans>Wallet</Trans>\n            </ThemedText.BodySecondary>\n          </Cell>\n        ),\n        cell: (makerAddress) => (\n          <Cell loading={showLoadingSkeleton} minWidth={150} justifyContent=\"flex-end\">\n            <StyledExternalLink href={getExplorerLink(chainId, makerAddress.getValue?.(), ExplorerDataType.ADDRESS)}>\n              {shortenAddress(makerAddress.getValue?.())}\n            </StyledExternalLink>\n          </Cell>\n        ),\n      }),\n    ]\n  }, [\n    sortState.sortBy,\n    sortState.sortDirection,\n    showLoadingSkeleton,\n    chainId,\n    filterModalIsOpen,\n    filter,\n    referenceToken.address,\n    unwrappedReferenceToken.symbol,\n    formatNumber,\n    activeLocalCurrency,\n    formatFiatPrice,\n  ])\n\n  return (\n    <TableWrapper>\n      <Table columns={columns} data={data} loading={loading} error={error} loadMore={loadMore} maxHeight={600} />\n    </TableWrapper>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport Row from 'components/Row'\nimport { TokenDetailsPoolsTable } from 'components/Tokens/TokenDetails/tables/TokenDetailsPoolsTable'\nimport { useState } from 'react'\nimport styled from 'styled-components'\nimport { ClickableStyle, ThemedText } from 'theme/components'\n\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\nimport { TransactionsTable } from './tables/TransactionsTable'\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\nconst Tab = styled(ThemedText.HeadlineMedium)<{ isActive?: boolean }>`\n  cursor: pointer;\n  color: ${({ isActive, theme }) => (isActive ? theme.neutral1 : theme.neutral2)};\n  ${ClickableStyle};\n`\nenum ActivityTab {\n  Txs,\n  Pools,\n}\nexport function ActivitySection() {\n  const { wrapped: referenceToken, chainId } = useTDPContext().currency\n\n  const [activityInView, setActivityInView] = useState(ActivityTab.Txs)\n\n  if (!referenceToken) {\n    return null\n  }\n  return (\n    <Container data-testid=\"token-details-activity-section\">\n      <Row gap=\"24px\" marginBottom=\"24px\" id=\"activity-header\">\n        <Tab isActive={activityInView === ActivityTab.Txs} onClick={() => setActivityInView(ActivityTab.Txs)}>\n          <Trans>Transactions</Trans>\n        </Tab>\n        <Tab isActive={activityInView === ActivityTab.Pools} onClick={() => setActivityInView(ActivityTab.Pools)}>\n          <Trans>Pools</Trans>\n        </Tab>\n      </Row>\n      {activityInView === ActivityTab.Txs && <TransactionsTable chainId={chainId} referenceToken={referenceToken} />}\n      {activityInView === ActivityTab.Pools && (\n        <TokenDetailsPoolsTable chainId={chainId} referenceToken={referenceToken} />\n      )}\n    </Container>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { ChainId, Currency } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { PortfolioLogo } from 'components/AccountDrawer/MiniPortfolio/PortfolioLogo'\nimport { Chain, PortfolioTokenBalancePartsFragment } from 'graphql/data/__generated__/types-and-hooks'\nimport { getTokenDetailsURL, gqlToCurrency, supportedChainIdFromGQLChain } from 'graphql/data/util'\nimport { useMemo } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\n\nconst BalancesCard = styled.div`\n  color: ${({ theme }) => theme.neutral1};\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  height: fit-content;\n  width: 100%;\n\n  // 768 hardcoded to match NFT-redesign navbar breakpoints\n  // src/nft/css/sprinkles.css.ts\n  // change to match theme breakpoints when this navbar is updated\n  @media screen and (min-width: 768px) {\n    display: flex;\n  }\n`\nconst BalanceSection = styled.div`\n  height: fit-content;\n  width: 100%;\n`\nconst BalanceRow = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  margin-top: 12px;\n`\nconst BalanceItem = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst BalanceAmountsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  margin-left: 12px;\n`\n\ninterface BalanceProps {\n  currency?: Currency\n  chainId?: ChainId\n  gqlBalance?: PortfolioTokenBalancePartsFragment\n  onClick?: () => void\n}\nconst Balance = ({ currency, chainId = ChainId.MAINNET, gqlBalance, onClick }: BalanceProps) => {\n  const { formatNumber } = useFormatter()\n  const currencies = useMemo(() => [currency], [currency])\n\n  const formattedGqlBalance = formatNumber({\n    input: gqlBalance?.quantity,\n    type: NumberType.TokenNonTx,\n  })\n  const formattedUsdGqlValue = formatNumber({\n    input: gqlBalance?.denominatedValue?.value,\n    type: NumberType.PortfolioBalance,\n  })\n\n  return (\n    <BalanceRow onClick={onClick}>\n      <PortfolioLogo\n        currencies={currencies}\n        chainId={chainId}\n        images={[gqlBalance?.tokenProjectMarket?.tokenProject.logoUrl]}\n        size=\"2rem\"\n      />\n      <BalanceAmountsContainer>\n        <BalanceItem>\n          <ThemedText.BodyPrimary>{formattedUsdGqlValue}</ThemedText.BodyPrimary>\n        </BalanceItem>\n        <BalanceItem>\n          <ThemedText.BodySecondary>{formattedGqlBalance}</ThemedText.BodySecondary>\n        </BalanceItem>\n      </BalanceAmountsContainer>\n    </BalanceRow>\n  )\n}\n\nconst PageChainBalanceSummary = ({ pageChainBalance }: { pageChainBalance?: PortfolioTokenBalancePartsFragment }) => {\n  if (!pageChainBalance || !pageChainBalance.token) return null\n  const currency = gqlToCurrency(pageChainBalance.token)\n  return (\n    <BalanceSection>\n      <ThemedText.HeadlineSmall color=\"neutral1\">\n        <Trans>Your balance</Trans>\n      </ThemedText.HeadlineSmall>\n      <Balance currency={currency} chainId={currency?.chainId} gqlBalance={pageChainBalance} />\n    </BalanceSection>\n  )\n}\n\nconst OtherChainsBalanceSummary = ({\n  otherChainBalances,\n  hasPageChainBalance,\n}: {\n  otherChainBalances: readonly PortfolioTokenBalancePartsFragment[]\n  hasPageChainBalance: boolean\n}) => {\n  const navigate = useNavigate()\n\n  if (!otherChainBalances.length) return null\n  return (\n    <BalanceSection>\n      {hasPageChainBalance ? (\n        <ThemedText.SubHeaderSmall>\n          <Trans>On other networks</Trans>\n        </ThemedText.SubHeaderSmall>\n      ) : (\n        <ThemedText.HeadlineSmall>\n          <Trans>Balance on other networks</Trans>\n        </ThemedText.HeadlineSmall>\n      )}\n      {otherChainBalances.map((balance) => {\n        const currency = balance.token && gqlToCurrency(balance.token)\n        const chainId = (balance.token && supportedChainIdFromGQLChain(balance.token.chain)) ?? ChainId.MAINNET\n        return (\n          <Balance\n            key={balance.id}\n            currency={currency}\n            chainId={chainId}\n            gqlBalance={balance}\n            onClick={() =>\n              navigate(\n                getTokenDetailsURL({\n                  address: balance.token?.address,\n                  chain: balance.token?.chain ?? Chain.Ethereum,\n                })\n              )\n            }\n          />\n        )\n      })}\n    </BalanceSection>\n  )\n}\n\nexport default function BalanceSummary() {\n  const { account } = useWeb3React()\n  const { currencyChain, multiChainMap } = useTDPContext()\n\n  const pageChainBalance = multiChainMap[currencyChain]?.balance\n  const otherChainBalances: PortfolioTokenBalancePartsFragment[] = []\n  for (const [key, value] of Object.entries(multiChainMap)) {\n    if (key !== currencyChain && value?.balance !== undefined) {\n      otherChainBalances.push(value.balance)\n    }\n  }\n  const hasBalances = pageChainBalance || Boolean(otherChainBalances.length)\n\n  if (!account || !hasBalances) {\n    return null\n  }\n  return (\n    <BalancesCard>\n      <PageChainBalanceSummary pageChainBalance={pageChainBalance} />\n      <OtherChainsBalanceSummary otherChainBalances={otherChainBalances} hasPageChainBalance={!!pageChainBalance} />\n    </BalancesCard>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useWeb3React } from '@web3-react/core'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { CHAIN_ID_TO_BACKEND_NAME } from 'graphql/data/util'\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\nimport styled from 'styled-components'\nimport { StyledInternalLink, ThemedText } from 'theme/components'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nconst Wrapper = styled.div`\n  align-content: center;\n  align-items: center;\n  background-color: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  color: ${({ theme }) => theme.neutral2};\n  display: none;\n  flex-direction: row;\n  font-weight: 535;\n  font-size: 14px;\n  height: fit-content;\n  justify-content: space-between;\n  left: 0;\n  line-height: 20px;\n  position: fixed;\n  z-index: ${Z_INDEX.sticky};\n  border-radius: 20px;\n  bottom: 56px;\n  margin: 8px;\n  padding: 12px 32px;\n  width: calc(100vw - 16px);\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    bottom: 0px;\n  }\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.lg}px) {\n    display: flex;\n  }\n`\nconst BalanceValue = styled.div`\n  color: ${({ theme }) => theme.neutral1};\n  font-size: 20px;\n  line-height: 20px;\n  display: flex;\n  gap: 8px;\n`\nconst Balance = styled.div`\n  align-items: flex-end;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 8px;\n`\nconst BalanceInfo = styled.div`\n  display: flex;\n  flex: 10 1 auto;\n  flex-direction: column;\n  justify-content: flex-start;\n  gap: 6px;\n`\nconst FiatValue = styled(ThemedText.Caption)`\n  font-size: 12px;\n  line-height: 16px;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.sm}px) {\n    line-height: 24px;\n  }\n`\nconst SwapButton = styled(StyledInternalLink)`\n  background-color: ${({ theme }) => theme.accent1};\n  border: none;\n  border-radius: 22px;\n  color: ${({ theme }) => theme.neutralContrast};\n  display: flex;\n  flex: 1 1 auto;\n  padding: 12px 16px;\n  font-size: 16px;\n  font-weight: 535;\n  height: 44px;\n  justify-content: center;\n  margin: auto;\n  max-width: 100vw;\n`\n\nexport default function MobileBalanceSummaryFooter() {\n  const { currency, multiChainMap, currencyChain } = useTDPContext()\n  const pageChainBalance = multiChainMap[currencyChain]?.balance\n\n  const { account } = useWeb3React()\n  const { formatNumber } = useFormatter()\n\n  const formattedGqlBalance = formatNumber({\n    input: pageChainBalance?.quantity,\n    type: NumberType.TokenNonTx,\n  })\n  const formattedUsdGqlValue = formatNumber({\n    input: pageChainBalance?.denominatedValue?.value,\n    type: NumberType.PortfolioBalance,\n  })\n  const chain = CHAIN_ID_TO_BACKEND_NAME[currency.chainId].toLowerCase()\n\n  return (\n    <Wrapper>\n      {Boolean(account && pageChainBalance) && (\n        <BalanceInfo>\n          <Trans>Your balance</Trans>\n          <Balance>\n            <BalanceValue>\n              {formattedGqlBalance} {currency.symbol}\n            </BalanceValue>\n            <FiatValue>{formattedUsdGqlValue}</FiatValue>\n          </Balance>\n        </BalanceInfo>\n      )}\n      <SwapButton to={`/swap?chain=${chain}&outputCurrency=${currency.isNative ? NATIVE_CHAIN_ID : currency.address}`}>\n        <Trans>Swap</Trans>\n      </SwapButton>\n    </Wrapper>\n  )\n}\n","import { t, Trans } from '@lingui/macro'\nimport { ChainId } from '@uniswap/sdk-core'\nimport Column from 'components/Column'\nimport { EtherscanLogo } from 'components/Icons/Etherscan'\nimport { Globe } from 'components/Icons/Globe'\nimport { TwitterXLogo } from 'components/Icons/TwitterX'\nimport Row from 'components/Row'\nimport { FOTTooltipContent } from 'components/swap/SwapLineItem'\nimport { NoInfoAvailable, truncateDescription, TruncateDescriptionButton } from 'components/Tokens/TokenDetails/shared'\nimport Tooltip, { MouseoverTooltip, TooltipSize } from 'components/Tooltip'\nimport useCopyClipboard from 'hooks/useCopyClipboard'\nimport { useSwapTaxes } from 'hooks/useSwapTaxes'\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\nimport { useCallback, useReducer } from 'react'\nimport { Copy } from 'react-feather'\nimport styled, { useTheme } from 'styled-components'\nimport { ClickableStyle, EllipsisStyle, ExternalLink, ThemedText } from 'theme/components'\nimport { shortenAddress } from 'utilities/src/addresses'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nconst TokenInfoSection = styled(Column)`\n  gap: 16px;\n  width: 100%;\n\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.lg}px) {\n    gap: 24px;\n  }\n`\n\nconst InfoSectionHeader = styled(ThemedText.HeadlineSmall)`\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.lg}px) {\n    font-size: 28px !important;\n    line-height: 36px !important;\n  }\n`\n\nconst TokenNameRow = styled(Row)`\n  gap: 8px;\n  width: 100%;\n`\n\nconst TokenButtonRow = styled(TokenNameRow)`\n  flex-wrap: wrap;\n`\n\nconst TokenInfoButton = styled(Row)`\n  gap: 8px;\n  padding: 8px 12px;\n  border-radius: 20px;\n  color: ${({ theme }) => theme.neutral1};\n  background-color: ${({ theme }) => theme.surface2};\n  font-size: 14px;\n  font-weight: 535;\n  line-height: 16px;\n  width: max-content;\n  ${ClickableStyle}\n`\n\nconst TokenDescriptionContainer = styled(ThemedText.BodyPrimary)`\n  ${EllipsisStyle}\n  max-width: 100%;\n  // max-height: fit-content;\n  line-height: 24px;\n  white-space: pre-wrap;\n`\n\nconst DescriptionVisibilityWrapper = styled.p<{ $visible: boolean }>`\n  display: ${({ $visible }) => ($visible ? 'inline' : 'none')};\n`\n\nconst TRUNCATE_CHARACTER_COUNT = 200\n\nexport function TokenDescription() {\n  const { address, currency, tokenQuery } = useTDPContext()\n  const { neutral2 } = useTheme()\n\n  const { description, homepageUrl, twitterName } = tokenQuery.data?.token?.project ?? {}\n  const explorerUrl = getExplorerLink(\n    currency.chainId,\n    address,\n    currency.isNative ? ExplorerDataType.NATIVE : ExplorerDataType.TOKEN\n  )\n\n  const [isCopied, setCopied] = useCopyClipboard()\n  const copy = useCallback(() => {\n    setCopied(address)\n  }, [address, setCopied])\n\n  const [isDescriptionTruncated, toggleIsDescriptionTruncated] = useReducer((x) => !x, true)\n  const truncatedDescription = truncateDescription(description ?? '', TRUNCATE_CHARACTER_COUNT)\n  const shouldTruncate = !!description && description.length > TRUNCATE_CHARACTER_COUNT\n  const showTruncatedDescription = shouldTruncate && isDescriptionTruncated\n  const { inputTax: sellFee, outputTax: buyFee } = useSwapTaxes(address, address)\n  const { formatPercent } = useFormatter()\n  const { sellFeeString, buyFeeString } = {\n    sellFeeString: formatPercent(sellFee),\n    buyFeeString: formatPercent(buyFee),\n  }\n  const hasFee = Boolean(parseFloat(sellFeeString)) || Boolean(parseFloat(buyFee.toFixed(2)))\n  const sameFee = sellFeeString === buyFeeString\n\n  return (\n    <TokenInfoSection data-testid=\"token-details-info-section\">\n      <InfoSectionHeader>\n        <Trans>Info</Trans>\n      </InfoSectionHeader>\n      <TokenButtonRow data-testid=\"token-details-info-links\">\n        {!currency.isNative && (\n          <Tooltip placement=\"bottom\" size={TooltipSize.Max} show={isCopied} text={t`Copied`}>\n            <TokenInfoButton onClick={copy}>\n              <Copy width=\"18px\" height=\"18px\" color={neutral2} />\n              {shortenAddress(currency.address)}\n            </TokenInfoButton>\n          </Tooltip>\n        )}\n        <ExternalLink href={explorerUrl}>\n          <TokenInfoButton>\n            <EtherscanLogo width=\"18px\" height=\"18px\" fill={neutral2} />\n            {currency.chainId === ChainId.MAINNET ? <Trans>Etherscan</Trans> : <Trans>Explorer</Trans>}\n          </TokenInfoButton>\n        </ExternalLink>\n        {homepageUrl && (\n          <ExternalLink href={homepageUrl}>\n            <TokenInfoButton>\n              <Globe width=\"18px\" height=\"18px\" fill={neutral2} />\n              <Trans>Website</Trans>\n            </TokenInfoButton>\n          </ExternalLink>\n        )}\n        {twitterName && (\n          <ExternalLink href={`https://x.com/${twitterName}`}>\n            <TokenInfoButton>\n              <TwitterXLogo width=\"18px\" height=\"18px\" fill={neutral2} />\n              <Trans>Twitter</Trans>\n            </TokenInfoButton>\n          </ExternalLink>\n        )}\n      </TokenButtonRow>\n      <TokenDescriptionContainer>\n        {!description && (\n          <NoInfoAvailable>\n            <Trans>No token information available</Trans>\n          </NoInfoAvailable>\n        )}\n        {description && (\n          <>\n            <DescriptionVisibilityWrapper data-testid=\"token-description-full\" $visible={!showTruncatedDescription}>\n              {description}\n            </DescriptionVisibilityWrapper>\n            <DescriptionVisibilityWrapper data-testid=\"token-description-truncated\" $visible={showTruncatedDescription}>\n              {truncatedDescription}\n            </DescriptionVisibilityWrapper>\n          </>\n        )}\n        {shouldTruncate && (\n          <TruncateDescriptionButton\n            onClick={toggleIsDescriptionTruncated}\n            data-testid=\"token-description-show-more-button\"\n          >\n            {isDescriptionTruncated ? <Trans>Show more</Trans> : <Trans>Hide</Trans>}\n          </TruncateDescriptionButton>\n        )}\n      </TokenDescriptionContainer>\n      {hasFee && (\n        <MouseoverTooltip\n          placement=\"left\"\n          size={TooltipSize.Small}\n          text={\n            <ThemedText.Caption color=\"neutral2\">\n              <FOTTooltipContent />\n            </ThemedText.Caption>\n          }\n        >\n          <Column gap=\"sm\">\n            {sameFee ? (\n              <ThemedText.BodyPrimary>\n                {currency.symbol}&nbsp;\n                <Trans>fee:</Trans>&nbsp;{sellFeeString}\n              </ThemedText.BodyPrimary>\n            ) : (\n              <>\n                <ThemedText.BodyPrimary>\n                  {currency.symbol}&nbsp;\n                  <Trans>buy fee:</Trans>&nbsp;{buyFeeString}\n                </ThemedText.BodyPrimary>{' '}\n                <ThemedText.BodyPrimary>\n                  {currency.symbol}&nbsp;\n                  <Trans>sell fee:</Trans>&nbsp;{sellFeeString}\n                </ThemedText.BodyPrimary>{' '}\n              </>\n            )}\n          </Column>\n        </MouseoverTooltip>\n      )}\n    </TokenInfoSection>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { ChainId, Currency } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { Trace } from 'analytics'\nimport { BreadcrumbNavContainer, BreadcrumbNavLink, CurrentPageBreadcrumb } from 'components/BreadcrumbNav'\nimport TokenSafetyMessage from 'components/TokenSafety/TokenSafetyMessage'\nimport TokenSafetyModal from 'components/TokenSafety/TokenSafetyModal'\nimport ChartSection from 'components/Tokens/TokenDetails/ChartSection'\nimport { LeftPanel, RightPanel, TokenDetailsLayout, TokenInfoContainer } from 'components/Tokens/TokenDetails/Skeleton'\nimport StatsSection from 'components/Tokens/TokenDetails/StatsSection'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { getTokenDetailsURL } from 'graphql/data/util'\nimport { useCurrency } from 'hooks/Tokens'\nimport { getInitialUrl } from 'hooks/useAssetLogoSource'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { useScreenSize } from 'hooks/useScreenSize'\nimport { Swap } from 'pages/Swap'\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\nimport { PropsWithChildren, useCallback, useMemo, useState } from 'react'\nimport { ChevronRight } from 'react-feather'\nimport { useNavigate } from 'react-router-dom'\nimport { CurrencyState } from 'state/swap/SwapContext'\nimport styled from 'styled-components'\nimport { addressesAreEquivalent } from 'utils/addressesAreEquivalent'\nimport { ActivitySection } from './ActivitySection'\nimport BalanceSummary from './BalanceSummary'\nimport MobileBalanceSummaryFooter from './MobileBalanceSummaryFooter'\nimport { TokenDescription } from './TokenDescription'\nimport { TokenDetailsHeader } from './TokenDetailsHeader'\nimport { Hr } from './shared'\n\nconst DividerLine = styled(Hr)`\n  margin-top: 40px;\n  margin-bottom: 40px;\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.sm}px) {\n    opacity: 0;\n    margin-bottom: 0;\n  }\n`\n\nfunction TDPBreadcrumb() {\n  const { address, currency, currencyChain } = useTDPContext()\n\n  return (\n    <BreadcrumbNavContainer aria-label=\"breadcrumb-nav\">\n      <BreadcrumbNavLink to={`/explore/${currencyChain.toLowerCase()}`}>\n        <Trans>Explore</Trans> <ChevronRight size={14} />\n      </BreadcrumbNavLink>\n      <BreadcrumbNavLink to={`/explore/tokens/${currencyChain.toLowerCase()}`}>\n        <Trans>Tokens</Trans> <ChevronRight size={14} />\n      </BreadcrumbNavLink>\n      <CurrentPageBreadcrumb address={address} currency={currency} />\n    </BreadcrumbNavContainer>\n  )\n}\n\nfunction getCurrencyURLAddress(currency?: Currency): string {\n  if (!currency) return ''\n\n  if (currency.isToken) {\n    return currency.address\n  }\n  return NATIVE_CHAIN_ID\n}\n\nfunction useSwapInitialInputCurrency() {\n  const { currency } = useTDPContext()\n  const parsedQs = useParsedQueryString()\n\n  const inputTokenAddress = useMemo(() => {\n    return typeof parsedQs.inputCurrency === 'string' ? (parsedQs.inputCurrency as string) : undefined\n  }, [parsedQs])\n\n  return useCurrency(inputTokenAddress, currency.chainId)\n}\n\nfunction TDPSwapComponent() {\n  const { address, currency, currencyChain, warning } = useTDPContext()\n  const appChainId = useWeb3React().chainId ?? ChainId.MAINNET\n  const navigate = useNavigate()\n\n  const handleCurrencyChange = useCallback(\n    (tokens: CurrencyState) => {\n      const inputCurrencyURLAddress = getCurrencyURLAddress(tokens.inputCurrency)\n      const outputCurrencyURLAddress = getCurrencyURLAddress(tokens.outputCurrency)\n      if (\n        addressesAreEquivalent(inputCurrencyURLAddress, address) ||\n        addressesAreEquivalent(outputCurrencyURLAddress, address)\n      ) {\n        return\n      }\n\n      const newDefaultToken = tokens.outputCurrency ?? tokens.inputCurrency\n\n      if (!newDefaultToken) return\n\n      const preloadedLogoSrc = getInitialUrl(\n        newDefaultToken.wrapped.address,\n        newDefaultToken.chainId,\n        newDefaultToken.isNative\n      )\n      const url = getTokenDetailsURL({\n        // The function falls back to \"NATIVE\" if the address is null\n        address: newDefaultToken.isNative ? null : newDefaultToken.address,\n        chain: currencyChain,\n        inputAddress:\n          // If only one token was selected before we navigate, then it was the default token and it's being replaced.\n          // On the new page, the *new* default token becomes the output, and we don't have another option to set as the input token.\n          tokens.inputCurrency && tokens.inputCurrency !== newDefaultToken ? inputCurrencyURLAddress : null,\n      })\n      navigate(url, { state: { preloadedLogoSrc } })\n    },\n    [address, currencyChain, navigate]\n  )\n\n  // Other token to prefill the swap form with\n  const initialInputCurrency = useSwapInitialInputCurrency()\n\n  const [openTokenSafetyModal, setOpenTokenSafetyModal] = useState(false)\n  const [continueSwap, setContinueSwap] = useState<{ resolve: (value: boolean | PromiseLike<boolean>) => void }>()\n\n  const onResolveSwap = useCallback(\n    (value: boolean) => {\n      continueSwap?.resolve(value)\n      setContinueSwap(undefined)\n    },\n    [continueSwap, setContinueSwap]\n  )\n  const isBlockedToken = warning?.canProceed === false\n\n  return (\n    <>\n      <div\n        style={{ pointerEvents: isBlockedToken ? 'none' : 'auto' }}\n        onClick={() => isBlockedToken && setOpenTokenSafetyModal(true)}\n      >\n        <Swap\n          syncTabToUrl={false}\n          chainId={currency.chainId}\n          initialInputCurrency={initialInputCurrency}\n          initialOutputCurrency={currency}\n          onCurrencyChange={handleCurrencyChange}\n          disableTokenInputs={currency.chainId !== appChainId}\n          compact\n        />\n      </div>\n      {warning && <TokenSafetyMessage tokenAddress={address} warning={warning} />}\n      <TokenSafetyModal\n        isOpen={openTokenSafetyModal || !!continueSwap}\n        tokenAddress={address}\n        onContinue={() => onResolveSwap(true)}\n        onBlocked={() => {\n          setOpenTokenSafetyModal(false)\n        }}\n        onCancel={() => onResolveSwap(false)}\n        showCancel={true}\n      />\n    </>\n  )\n}\n\nfunction TDPAnalytics({ children }: PropsWithChildren) {\n  const { address, currency } = useTDPContext()\n  return (\n    <Trace\n      page={InterfacePageName.TOKEN_DETAILS_PAGE}\n      properties={{\n        tokenAddress: address,\n        tokenSymbol: currency.symbol,\n        tokenName: currency.name,\n        chainId: currency.chainId,\n      }}\n      shouldLogImpression\n    >\n      {children}\n    </Trace>\n  )\n}\n\nexport default function TokenDetails() {\n  const { address, currency, tokenQuery } = useTDPContext()\n  const tokenQueryData = tokenQuery.data?.token\n\n  const { lg: isLargeScreenSize } = useScreenSize()\n\n  return (\n    <TDPAnalytics>\n      <TokenDetailsLayout>\n        <LeftPanel>\n          <TDPBreadcrumb />\n          <TokenInfoContainer data-testid=\"token-info-container\">\n            <TokenDetailsHeader />\n          </TokenInfoContainer>\n          <ChartSection />\n          <StatsSection chainId={currency.chainId} address={address} tokenQueryData={tokenQueryData} />\n          <DividerLine />\n          <ActivitySection />\n        </LeftPanel>\n        <RightPanel>\n          {isLargeScreenSize && (\n            <>\n              <TDPSwapComponent />\n              <BalanceSummary />\n            </>\n          )}\n          <TokenDescription />\n        </RightPanel>\n        <MobileBalanceSummaryFooter />\n      </TokenDetailsLayout>\n    </TDPAnalytics>\n  )\n}\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgEye(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.75 12C14.75 13.517 13.517 14.75 12 14.75C10.483 14.75 9.25004 13.517 9.25004 12C9.25004 11.651 9.32196 11.32 9.44096 11.012C9.63496 11.166 9.86903 11.272 10.136 11.272C10.763 11.272 11.272 10.763 11.272 10.136C11.272 9.86899 11.166 9.63492 11.012 9.44092C11.32 9.32192 11.651 9.25 12 9.25C13.517 9.25 14.75 10.483 14.75 12ZM20.5921 13.4771C19.3651 15.5311 16.609 19 12 19C7.39104 19 4.635 15.5311 3.408 13.4771C2.864 12.5671 2.864 11.4329 3.408 10.5229C4.635 8.46895 7.39104 5 12 5C16.609 5 19.3651 8.46895 20.5921 10.5229C21.1361 11.4329 21.1361 12.5671 20.5921 13.4771ZM16.25 12C16.25 9.657 14.344 7.75 12 7.75C9.65604 7.75 7.75004 9.657 7.75004 12C7.75004 14.343 9.65604 16.25 12 16.25C14.344 16.25 16.25 14.343 16.25 12Z\",\n    fill: \"currentColor\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgEye);\nexport default __webpack_public_path__ + \"static/media/eye.0b7e1ea0bf8a719e75d97cfc5cd4e72d.svg\";\nexport { ForwardRef as ReactComponent };","import { Trans } from '@lingui/macro'\nimport { ChainId } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { ButtonPrimary } from 'components/Button'\nimport { getChainInfo } from 'constants/chainInfo'\nimport useSelectChain from 'hooks/useSelectChain'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\n\nimport { ReactComponent as EyeIcon } from '../../../assets/svg/eye.svg'\n\nconst InvalidDetailsContainer = styled.div`\n  padding-top: 128px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst InvalidDetailsText = styled.span`\n  margin-top: 28px;\n  margin-bottom: 20px;\n\n  text-align: center;\n\n  color: ${({ theme }) => theme.neutral2};\n  font-size: 20px;\n  font-weight: 535;\n  line-height: 28px;\n`\n\nconst TokenExploreButton = styled(ButtonPrimary)`\n  width: fit-content;\n  padding: 12px 16px;\n  border-radius: 12px;\n\n  color: ${({ theme }) => theme.neutral1};\n  font-size: 16px;\n  font-weight: 535;\n`\n\nexport default function InvalidTokenDetails({\n  pageChainId,\n  isInvalidAddress,\n}: {\n  pageChainId: ChainId\n  isInvalidAddress?: boolean\n}) {\n  const { chainId } = useWeb3React()\n  const navigate = useNavigate()\n  const selectChain = useSelectChain()\n\n  // if the token's address is valid and the chains match, it's a non-existant token\n  const isNonExistentToken = !isInvalidAddress && pageChainId === chainId\n\n  const connectedChainLabel = chainId ? getChainInfo(chainId)?.label : undefined\n\n  return (\n    <InvalidDetailsContainer>\n      <EyeIcon />\n      {isInvalidAddress || isNonExistentToken ? (\n        <>\n          <InvalidDetailsText>\n            <Trans>This token doesn&apos;t exist</Trans>\n          </InvalidDetailsText>\n          <TokenExploreButton onClick={() => navigate('/tokens')}>\n            <ThemedText.SubHeader>\n              <Trans>Explore tokens</Trans>\n            </ThemedText.SubHeader>\n          </TokenExploreButton>\n        </>\n      ) : (\n        <>\n          {connectedChainLabel && (\n            <InvalidDetailsText>\n              <Trans>This token doesn&apos;t exist on {connectedChainLabel}</Trans>\n            </InvalidDetailsText>\n          )}\n          <TokenExploreButton onClick={() => selectChain(pageChainId)}>\n            <ThemedText.SubHeader>\n              <Trans>Switch to {getChainInfo(pageChainId).label}</Trans>\n            </ThemedText.SubHeader>\n          </TokenExploreButton>\n        </>\n      )}\n    </InvalidDetailsContainer>\n  )\n}\n","import { t } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\n\nexport const getTokenPageTitle = (currency?: Currency) => {\n  const tokenName = currency?.name\n  const tokenSymbol = currency?.symbol\n  const baseTitle = t`Nexis Swap`\n  if (!tokenName && !tokenSymbol) {\n    return baseTitle\n  }\n  if (!tokenName && tokenSymbol) {\n    return t`${tokenSymbol}: ${baseTitle}`\n  }\n  if (tokenName && !tokenSymbol) {\n    return t`${tokenName}: ${baseTitle}`\n  }\n  return t`${tokenName} (${tokenSymbol}): ${baseTitle}`\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport PrefetchBalancesWrapper, {\n  useCachedPortfolioBalancesQuery,\n} from 'components/PrefetchBalancesWrapper/PrefetchBalancesWrapper'\nimport TokenDetails from 'components/Tokens/TokenDetails'\nimport { useCreateTDPChartState } from 'components/Tokens/TokenDetails/ChartSection'\nimport InvalidTokenDetails from 'components/Tokens/TokenDetails/InvalidTokenDetails'\nimport { TokenDetailsPageSkeleton } from 'components/Tokens/TokenDetails/Skeleton'\nimport { checkWarning } from 'constants/tokenSafety'\nimport { NATIVE_CHAIN_ID, nativeOnChain } from 'constants/tokens'\nimport { useTokenQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { gqlToCurrency, supportedChainIdFromGQLChain, validateUrlChainParam } from 'graphql/data/util'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useSrcColor } from 'hooks/useColor'\nimport { UNKNOWN_TOKEN_SYMBOL } from 'lib/hooks/useCurrency'\nimport { useMemo } from 'react'\nimport { Helmet } from 'react-helmet-async/lib/index'\nimport { useLocation, useParams } from 'react-router-dom'\nimport styled, { useTheme } from 'styled-components'\nimport { ThemeProvider } from 'theme'\nimport { isAddress } from 'utilities/src/addresses'\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens'\nimport { LoadedTDPContext, MultiChainMap, PendingTDPContext, TDPProvider } from './TDPContext'\nimport { getTokenPageTitle } from './utils'\n\nconst StyledPrefetchBalancesWrapper = styled(PrefetchBalancesWrapper)`\n  display: contents;\n`\n\nfunction useOnChainToken(address: string | undefined, chainId: ChainId, skip: boolean) {\n  const token = useCurrency(!skip ? address : undefined, chainId)\n\n  if (skip || !address || (token && token?.symbol === UNKNOWN_TOKEN_SYMBOL)) {\n    return undefined\n  } else {\n    return token\n  }\n}\n\n/** Resolves a currency object from the following sources in order of preference: statically stored natives, query data, backup on-chain fetch data */\nfunction useTDPCurrency(\n  tokenQuery: ReturnType<typeof useTokenQuery>,\n  tokenAddress: string,\n  currencyChainId: ChainId,\n  isNative: boolean\n) {\n  const { chainId } = useWeb3React()\n  const appChainId = chainId ?? ChainId.MAINNET\n\n  const queryCurrency = useMemo(() => {\n    if (isNative) return nativeOnChain(currencyChainId)\n    if (tokenQuery.data?.token) return gqlToCurrency(tokenQuery.data.token)\n    return undefined\n  }, [isNative, currencyChainId, tokenQuery.data?.token])\n  // fetches on-chain token if query data is missing and page chain matches global chain (else fetch won't work)\n  const skipOnChainFetch = Boolean(queryCurrency) || currencyChainId !== appChainId\n  const onChainToken = useOnChainToken(tokenAddress, currencyChainId, skipOnChainFetch)\n  const currency = queryCurrency ?? onChainToken\n  const currencyWasFetchedOnChain = !queryCurrency\n\n  return { currency, currencyWasFetchedOnChain }\n}\n\n/** Returns a map to store addresses and balances of the TDP token on other chains */\nfunction useMultiChainMap(tokenQuery: ReturnType<typeof useTokenQuery>) {\n  const { account } = useWeb3React()\n\n  // Build map to store addresses and balances of this token on other chains\n  const { data: balanceQuery } = useCachedPortfolioBalancesQuery({ account })\n  return useMemo(() => {\n    const tokenBalances = balanceQuery?.portfolios?.[0].tokenBalances\n    const tokensAcrossChains = tokenQuery.data?.token?.project?.tokens\n    if (!tokensAcrossChains) return {}\n    return tokensAcrossChains.reduce<MultiChainMap>((map, current) => {\n      if (current) {\n        if (!map[current.chain]) map[current.chain] = {}\n        const update = map[current.chain] ?? {}\n        update.address = current.address\n        update.balance = tokenBalances?.find((tokenBalance) => tokenBalance.token?.id === current.id)\n        map[current.chain] = update\n      }\n      return map\n    }, {})\n  }, [balanceQuery?.portfolios, tokenQuery.data?.token?.project?.tokens])\n}\n\nfunction useCreateTDPContext(): PendingTDPContext | LoadedTDPContext {\n  const { tokenAddress, chainName } = useParams<{ tokenAddress: string; chainName?: string }>()\n  if (!tokenAddress) throw new Error('Invalid token details route: token address URL param is undefined')\n  const currencyChain = validateUrlChainParam(chainName)\n  const currencyChainId = supportedChainIdFromGQLChain(currencyChain)\n\n  const isNative = tokenAddress === NATIVE_CHAIN_ID\n\n  const tokenDBAddress = isNative ? getNativeTokenDBAddress(currencyChain) : tokenAddress\n\n  const tokenQuery = useTokenQuery({ variables: { address: tokenDBAddress, chain: currencyChain }, errorPolicy: 'all' })\n  const chartState = useCreateTDPChartState(tokenDBAddress, currencyChain)\n\n  const multiChainMap = useMultiChainMap(tokenQuery)\n\n  const { currency, currencyWasFetchedOnChain } = useTDPCurrency(tokenQuery, tokenAddress, currencyChainId, isNative)\n\n  const warning = checkWarning(tokenAddress, currencyChainId)\n\n  // Extract color for page usage\n  const theme = useTheme()\n  const { preloadedLogoSrc } = (useLocation().state as { preloadedLogoSrc?: string }) ?? {}\n  const extractedColorSrc = tokenQuery.data?.token?.project?.logoUrl ?? preloadedLogoSrc\n  const extractedAccent1 = useSrcColor(extractedColorSrc, { backgroundColor: theme.surface2, darkMode: theme.darkMode })\n\n  return useMemo(() => {\n    return {\n      currency,\n      currencyChain,\n      currencyChainId,\n      // `currency.address` is checksummed, whereas the `tokenAddress` url param may not be\n      address: (currency?.isNative ? NATIVE_CHAIN_ID : currency?.address) ?? tokenAddress,\n      currencyWasFetchedOnChain,\n      tokenQuery,\n      chartState,\n      warning,\n      multiChainMap,\n      extractedAccent1,\n    }\n  }, [\n    currency,\n    currencyChain,\n    currencyChainId,\n    currencyWasFetchedOnChain,\n    extractedAccent1,\n    multiChainMap,\n    warning,\n    tokenAddress,\n    tokenQuery,\n    chartState,\n  ])\n}\n\nexport default function TokenDetailsPage() {\n  const pageChainId = useWeb3React().chainId ?? ChainId.MAINNET\n  const contextValue = useCreateTDPContext()\n\n  return (\n    <StyledPrefetchBalancesWrapper shouldFetchOnAccountUpdate={true} shouldFetchOnHover={false}>\n      <ThemeProvider accent1={contextValue.extractedAccent1}>\n        <Helmet>\n          <title>{getTokenPageTitle(contextValue?.currency)}</title>\n        </Helmet>\n        {(() => {\n          if (contextValue.currency) {\n            return (\n              <TDPProvider contextValue={contextValue}>\n                <TokenDetails />\n              </TDPProvider>\n            )\n          }\n\n          if (contextValue.tokenQuery.loading) {\n            return <TokenDetailsPageSkeleton />\n          } else {\n            return <InvalidTokenDetails pageChainId={pageChainId} isInvalidAddress={!isAddress(contextValue.address)} />\n          }\n        })()}\n      </ThemeProvider>\n    </StyledPrefetchBalancesWrapper>\n  )\n}\n","export function addressesAreEquivalent(a: string | null | undefined, b: string | null | undefined) {\n  if (!a || !b) return false\n  return a === b || a.toLowerCase() === b.toLowerCase()\n}\n"],"names":["Label","styled","div","backgroundColor","theme","surface3","color","TitleRow","Title","Text","DetailsRow","neutral2","StyledLink","ExternalLink","accent1","TokenSafetyMessage","warning","tokenAddress","plural","tokenSymbol","useTokenWarningColor","level","textColor","useTokenWarningTextColor","heading","description","getWarningCopy","data-cy","displayWarningLabel","canProceed","AlertTriangle","size","Slash","marginLeft","message","Boolean","href","TOKEN_SAFETY_ARTICLE","DEFAULT_QUERY_SIZE","HIDDEN_COLUMNS","PoolTableColumns","Transactions","TokenDetailsPoolsTable","chainId","referenceToken","sortMethod","useAtomValue","sortMethodAtom","sortAscending","sortAscendingAtom","sortState","useMemo","sortBy","sortDirection","OrderDirection","Asc","Desc","pools","loading","error","loadMore","dataV2","dataV3","loadingV3","errorV3","data","fetchMore","fetchMoreV3","useTopV3PoolsQuery","variables","first","chain","chainIdToBackendName","loadingV2","errorV2","fetchMoreV2","useTopV2PairsQuery","skip","ChainId","MAINNET","loadingMoreV3","useRef","loadingMoreV2","sizeRef","useCallback","onComplete","current","cursor","topV3Pools","length","totalLiquidity","value","updateQuery","prev","fetchMoreResult","Object","keys","mergedData","slice","topV2Pairs","map","pool","hash","address","token0","token1","txCount","tvl","volume24h","volumeWeek","turnover","calculateTurnover","feeTier","protocolVersion","V2_BIPS","sortPools","usePoolsFromTokenAddress","resetSortMethod","useResetAtom","resetSortAscending","useEffect","data-testid","toLowerCase","PoolsTable","maxHeight","hiddenColumns","TokenTransactionType","BUY","SELL","TokenTransactionDefaultQuerySize","StyledSwapAmount","ThemedText","BodyPrimary","EllipsisStyle","TableWrapper","TransactionsTable","activeLocalCurrency","useActiveLocalCurrency","formatNumber","formatFiatPrice","useFormatter","filterModalIsOpen","toggleFilterModal","useReducer","s","filter","setFilters","useState","Swap_OrderBy","Timestamp","transactions","useV3TokenTransactionsQuery","useV2TokenTransactionsQuery","querySizeRef","token","v3Transactions","timestamp","id","Chain","Ethereum","v2Transactions","tx","tokenBeingSold","isSell","parseFloat","token0Quantity","type","PoolTransactionType","Swap","includes","sort","a","b","useTokenTransactions","unwrappedReferenceToken","unwrapToken","transaction","swapLeg0","symbol","amount","swapLeg1","token1Quantity","token0IsBeingSold","input","output","usdValue","makerAddress","account","showLoadingSkeleton","columns","columnHelper","createColumnHelper","accessor","row","header","Cell","minWidth","justifyContent","grow","Row","gap","HeaderArrow","direction","HeaderSortText","$active","cell","TimestampCell","Number","getValue","link","getExplorerLink","ExplorerDataType","TRANSACTION","FilterHeaderRow","modalOpen","onClick","Filter","allFilters","values","activeFilter","isOpen","BodySecondary","outputTokenAddress","isBuy","String","inputTokenAmount","Math","abs","nonReferenceSwapLeg","justify","TokenLinkCell","swapOutput","AmountUsd","fiat","price","StyledExternalLink","ADDRESS","shortenAddress","Table","Container","Tab","HeadlineMedium","isActive","neutral1","ClickableStyle","ActivitySection","wrapped","useTDPContext","currency","activityInView","setActivityInView","ActivityTab","Txs","marginBottom","Pools","BalancesCard","BalanceSection","BalanceRow","BalanceItem","BalanceAmountsContainer","Balance","gqlBalance","currencies","formattedGqlBalance","quantity","NumberType","TokenNonTx","formattedUsdGqlValue","denominatedValue","PortfolioBalance","PortfolioLogo","images","tokenProjectMarket","tokenProject","logoUrl","PageChainBalanceSummary","pageChainBalance","gqlToCurrency","HeadlineSmall","OtherChainsBalanceSummary","otherChainBalances","hasPageChainBalance","navigate","useNavigate","SubHeaderSmall","balance","supportedChainIdFromGQLChain","getTokenDetailsURL","BalanceSummary","multiChainMap","useWeb3React","currencyChain","key","entries","undefined","push","hasBalances","Wrapper","surface1","Z_INDEX","sticky","breakpoint","md","lg","BalanceValue","BalanceInfo","FiatValue","Caption","sm","SwapButton","StyledInternalLink","neutralContrast","MobileBalanceSummaryFooter","CHAIN_ID_TO_BACKEND_NAME","to","isNative","NATIVE_CHAIN_ID","TokenInfoSection","Column","InfoSectionHeader","TokenNameRow","TokenButtonRow","TokenInfoButton","surface2","TokenDescriptionContainer","DescriptionVisibilityWrapper","p","$visible","TRUNCATE_CHARACTER_COUNT","TokenDescription","tokenQuery","useTheme","homepageUrl","twitterName","project","explorerUrl","NATIVE","TOKEN","isCopied","setCopied","useCopyClipboard","copy","isDescriptionTruncated","toggleIsDescriptionTruncated","x","truncatedDescription","truncateDescription","shouldTruncate","showTruncatedDescription","inputTax","sellFee","outputTax","buyFee","useSwapTaxes","formatPercent","sellFeeString","buyFeeString","hasFee","toFixed","sameFee","Tooltip","placement","TooltipSize","Max","show","text","Copy","width","height","EtherscanLogo","fill","Globe","TwitterXLogo","NoInfoAvailable","TruncateDescriptionButton","MouseoverTooltip","Small","FOTTooltipContent","DividerLine","Hr","TDPBreadcrumb","BreadcrumbNavContainer","aria-label","BreadcrumbNavLink","ChevronRight","CurrentPageBreadcrumb","getCurrencyURLAddress","isToken","TDPSwapComponent","appChainId","handleCurrencyChange","tokens","inputCurrencyURLAddress","inputCurrency","outputCurrencyURLAddress","outputCurrency","addressesAreEquivalent","newDefaultToken","preloadedLogoSrc","getInitialUrl","url","inputAddress","state","initialInputCurrency","parsedQs","useParsedQueryString","inputTokenAddress","useCurrency","useSwapInitialInputCurrency","openTokenSafetyModal","setOpenTokenSafetyModal","continueSwap","setContinueSwap","onResolveSwap","resolve","isBlockedToken","style","pointerEvents","syncTabToUrl","initialOutputCurrency","onCurrencyChange","disableTokenInputs","compact","TokenSafetyModal","onContinue","onBlocked","onCancel","showCancel","TDPAnalytics","children","Trace","page","InterfacePageName","TOKEN_DETAILS_PAGE","properties","tokenName","name","shouldLogImpression","TokenDetails","tokenQueryData","isLargeScreenSize","useScreenSize","TokenDetailsLayout","LeftPanel","TokenInfoContainer","TokenDetailsHeader","ChartSection","StatsSection","RightPanel","_path","_extends","assign","bind","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","SvgEye","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","d","ForwardRef","InvalidDetailsContainer","InvalidDetailsText","span","TokenExploreButton","ButtonPrimary","InvalidTokenDetails","pageChainId","isInvalidAddress","getChainInfo","selectChain","useSelectChain","isNonExistentToken","connectedChainLabel","label","EyeIcon","SubHeader","getTokenPageTitle","baseTitle","StyledPrefetchBalancesWrapper","PrefetchBalancesWrapper","useTDPCurrency","currencyChainId","queryCurrency","nativeOnChain","skipOnChainFetch","onChainToken","UNKNOWN_TOKEN_SYMBOL","useOnChainToken","currencyWasFetchedOnChain","useCreateTDPContext","chainName","useParams","Error","validateUrlChainParam","tokenDBAddress","getNativeTokenDBAddress","useTokenQuery","errorPolicy","chartState","useCreateTDPChartState","balanceQuery","useCachedPortfolioBalancesQuery","tokenBalances","portfolios","tokensAcrossChains","reduce","update","find","tokenBalance","useMultiChainMap","checkWarning","extractedColorSrc","extractedAccent1","useSrcColor","darkMode","TokenDetailsPage","contextValue","shouldFetchOnAccountUpdate","shouldFetchOnHover","ThemeProvider","Helmet","TDPProvider","TokenDetailsPageSkeleton","isAddress"],"sourceRoot":""}