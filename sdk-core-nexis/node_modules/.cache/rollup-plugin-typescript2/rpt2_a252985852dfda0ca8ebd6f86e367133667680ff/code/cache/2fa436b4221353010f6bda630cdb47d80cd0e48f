{"code":"import JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { Fraction } from './fraction';\r\nimport { CurrencyAmount } from './currencyAmount';\r\nexport class Price extends Fraction {\r\n    /**\r\n     * Construct a price, either with the base and quote currency amount, or the\r\n     * @param args\r\n     */\r\n    constructor(...args) {\r\n        let baseCurrency, quoteCurrency, denominator, numerator;\r\n        if (args.length === 4) {\r\n            ;\r\n            [baseCurrency, quoteCurrency, denominator, numerator] = args;\r\n        }\r\n        else {\r\n            const result = args[0].quoteAmount.divide(args[0].baseAmount);\r\n            [baseCurrency, quoteCurrency, denominator, numerator] = [\r\n                args[0].baseAmount.currency,\r\n                args[0].quoteAmount.currency,\r\n                result.denominator,\r\n                result.numerator\r\n            ];\r\n        }\r\n        super(numerator, denominator);\r\n        this.baseCurrency = baseCurrency;\r\n        this.quoteCurrency = quoteCurrency;\r\n        this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));\r\n    }\r\n    /**\r\n     * Flip the price, switching the base and quote currency\r\n     */\r\n    invert() {\r\n        return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\r\n    }\r\n    /**\r\n     * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n     * @param other the other price\r\n     */\r\n    multiply(other) {\r\n        invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN');\r\n        const fraction = super.multiply(other);\r\n        return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\r\n    }\r\n    /**\r\n     * Return the amount of quote currency corresponding to a given amount of the base currency\r\n     * @param currencyAmount the amount of base currency to quote against the price\r\n     */\r\n    quote(currencyAmount) {\r\n        invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN');\r\n        const result = super.multiply(currencyAmount);\r\n        return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);\r\n    }\r\n    /**\r\n     * Get the value scaled by decimals for formatting\r\n     * @private\r\n     */\r\n    get adjustedForDecimals() {\r\n        return super.multiply(this.scalar);\r\n    }\r\n    toSignificant(significantDigits = 6, format, rounding) {\r\n        return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\r\n    }\r\n    toFixed(decimalPlaces = 4, format, rounding) {\r\n        return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\r\n    }\r\n}\r\n//# sourceMappingURL=price.js.map","references":["/Users/anukul/Desktop/uniswap/sdk-core/node_modules/jsbi/jsbi.d.ts","/Users/anukul/Desktop/uniswap/sdk-core/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/anukul/Desktop/uniswap/sdk-core/src/constants.ts","/Users/anukul/Desktop/uniswap/sdk-core/src/entities/currency.ts","/Users/anukul/Desktop/uniswap/sdk-core/src/entities/fractions/fraction.ts","/Users/anukul/Desktop/uniswap/sdk-core/src/entities/fractions/currencyAmount.ts"],"map":"{\"version\":3,\"file\":\"price.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/entities/fractions/price.ts\"],\"names\":[],\"mappings\":\"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\"}"}
