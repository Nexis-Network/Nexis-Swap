{"code":"import JSBI from 'jsbi';\r\nimport { Fraction } from './fraction';\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100));\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction) {\r\n    return new Percent(fraction.numerator, fraction.denominator);\r\n}\r\nexport class Percent extends Fraction {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * This boolean prevents a fraction from being interpreted as a Percent\r\n         */\r\n        this.isPercent = true;\r\n    }\r\n    add(other) {\r\n        return toPercent(super.add(other));\r\n    }\r\n    subtract(other) {\r\n        return toPercent(super.subtract(other));\r\n    }\r\n    multiply(other) {\r\n        return toPercent(super.multiply(other));\r\n    }\r\n    divide(other) {\r\n        return toPercent(super.divide(other));\r\n    }\r\n    toSignificant(significantDigits = 5, format, rounding) {\r\n        return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\r\n    }\r\n    toFixed(decimalPlaces = 2, format, rounding) {\r\n        return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\r\n    }\r\n}\r\n//# sourceMappingURL=percent.js.map","references":["/Users/anukul/Desktop/Nexis-Swap/sdk-core-nexis/node_modules/jsbi/jsbi.d.ts","/Users/anukul/Desktop/Nexis-Swap/sdk-core-nexis/src/constants.ts","/Users/anukul/Desktop/Nexis-Swap/sdk-core-nexis/src/entities/fractions/fraction.ts"],"map":"{\"version\":3,\"file\":\"percent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/entities/fractions/percent.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,IAAI,MAAM,MAAM,CAAA;AAEvB,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAA;AAErC,MAAM,WAAW,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;AAElD;;;GAGG;AACH,SAAS,SAAS,CAAC,QAAkB;IACnC,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAA;AAC9D,CAAC;AAED,MAAM,OAAO,OAAQ,SAAQ,QAAQ;IAArC;;QACE;;WAEG;QACa,cAAS,GAAS,IAAI,CAAA;IAyBxC,CAAC;IAvBC,GAAG,CAAC,KAA2B;QAC7B,OAAO,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAA;IACpC,CAAC;IAED,QAAQ,CAAC,KAA2B;QAClC,OAAO,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAA;IACzC,CAAC;IAED,QAAQ,CAAC,KAA2B;QAClC,OAAO,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAA;IACzC,CAAC;IAED,MAAM,CAAC,KAA2B;QAChC,OAAO,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;IACvC,CAAC;IAEM,aAAa,CAAC,oBAA4B,CAAC,EAAE,MAAe,EAAE,QAAmB;QACtF,OAAO,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,iBAAiB,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAA;IACvF,CAAC;IAEM,OAAO,CAAC,gBAAwB,CAAC,EAAE,MAAe,EAAE,QAAmB;QAC5E,OAAO,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAA;IAC7E,CAAC;CACF\"}","dts":{"name":"/Users/anukul/Desktop/Nexis-Swap/sdk-core-nexis/entities/fractions/percent.d.ts","writeByteOrderMark":false,"text":"import { BigintIsh, Rounding } from '../../constants';\r\nimport { Fraction } from './fraction';\r\nexport declare class Percent extends Fraction {\r\n    /**\r\n     * This boolean prevents a fraction from being interpreted as a Percent\r\n     */\r\n    readonly isPercent: true;\r\n    add(other: Fraction | BigintIsh): Percent;\r\n    subtract(other: Fraction | BigintIsh): Percent;\r\n    multiply(other: Fraction | BigintIsh): Percent;\r\n    divide(other: Fraction | BigintIsh): Percent;\r\n    toSignificant(significantDigits?: number, format?: object, rounding?: Rounding): string;\r\n    toFixed(decimalPlaces?: number, format?: object, rounding?: Rounding): string;\r\n}\r\n"}}
