{"code":"import invariant from 'tiny-invariant';\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport class BaseCurrency {\r\n    /**\r\n     * Constructs an instance of the base class `BaseCurrency`.\r\n     * @param chainId the chain ID on which this currency resides\r\n     * @param decimals decimals of the currency\r\n     * @param symbol symbol of the currency\r\n     * @param name of the currency\r\n     */\r\n    constructor(chainId, decimals, symbol, name) {\r\n        invariant(Number.isSafeInteger(chainId), 'CHAIN_ID');\r\n        invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS');\r\n        this.chainId = chainId;\r\n        this.decimals = decimals;\r\n        this.symbol = symbol;\r\n        this.name = name;\r\n    }\r\n}\r\n//# sourceMappingURL=baseCurrency.js.map","references":["/Users/anukul/Desktop/Nexis-Swap/sdk-core-nexis/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/anukul/Desktop/Nexis-Swap/sdk-core-nexis/src/entities/currency.ts","/Users/anukul/Desktop/Nexis-Swap/sdk-core-nexis/src/entities/token.ts"],"map":"{\"version\":3,\"file\":\"baseCurrency.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/entities/baseCurrency.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,SAAS,MAAM,gBAAgB,CAAA;AAItC;;GAEG;AACH,MAAM,OAAgB,YAAY;IA2BhC;;;;;;OAMG;IACH,YAAsB,OAAe,EAAE,QAAgB,EAAE,MAAe,EAAE,IAAa;QACrF,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,UAAU,CAAC,CAAA;QACpD,SAAS,CAAC,QAAQ,IAAI,CAAC,IAAI,QAAQ,GAAG,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,UAAU,CAAC,CAAA;QAEpF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IAClB,CAAC;CAaF\"}","dts":{"name":"/Users/anukul/Desktop/Nexis-Swap/sdk-core-nexis/entities/baseCurrency.d.ts","writeByteOrderMark":false,"text":"import { Currency } from './currency';\r\nimport { Token } from './token';\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport declare abstract class BaseCurrency {\r\n    /**\r\n     * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n     */\r\n    abstract readonly isNative: boolean;\r\n    /**\r\n     * Returns whether the currency is a token that is usable in Nexis without wrapping\r\n     */\r\n    abstract readonly isToken: boolean;\r\n    /**\r\n     * The chain ID on which this currency resides\r\n     */\r\n    readonly chainId: number;\r\n    /**\r\n     * The decimals used in representing currency amounts\r\n     */\r\n    readonly decimals: number;\r\n    /**\r\n     * The symbol of the currency, i.e. a short textual non-unique identifier\r\n     */\r\n    readonly symbol?: string;\r\n    /**\r\n     * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n     */\r\n    readonly name?: string;\r\n    /**\r\n     * Constructs an instance of the base class `BaseCurrency`.\r\n     * @param chainId the chain ID on which this currency resides\r\n     * @param decimals decimals of the currency\r\n     * @param symbol symbol of the currency\r\n     * @param name of the currency\r\n     */\r\n    protected constructor(chainId: number, decimals: number, symbol?: string, name?: string);\r\n    /**\r\n     * Returns whether this currency is functionally equivalent to the other currency\r\n     * @param other the other currency\r\n     */\r\n    abstract equals(other: Currency): boolean;\r\n    /**\r\n     * Return the wrapped version of this currency that can be used with the Nexis contracts. Currencies must\r\n     * implement this to be used in Nexis\r\n     */\r\n    abstract get wrapped(): Token;\r\n}\r\n"}}
