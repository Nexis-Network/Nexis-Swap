{"version":3,"file":"static/js/3464.3069467d.chunk.js","mappings":"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","sources":["graphql/data/nft/NftUniversalRouterAddress.ts","nft/utils/bag.ts","nft/utils/nftRoute.ts","nft/hooks/usePurchaseAssets.ts","nft/hooks/useTokenInput.ts","nft/hooks/useFetchAssets.ts","nft/utils/tokenRoutes.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/components/bag/ButtonStates.tsx","nft/components/bag/BagFooter.tsx","nft/hooks/useSubscribeTransactionState.ts","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts","nft/components/modals/Overlay.tsx","nft/components/modals/Overlay.css.ts","nft/hooks/useBagTotalEthPrice.ts"],"sourcesContent":["import { ChainId } from '@uniswap/sdk-core'\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { isSupportedChain } from 'constants/chains'\nimport gql from 'graphql-tag'\n\nimport { useNftUniversalRouterAddressQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query NftUniversalRouterAddress($chain: Chain = ETHEREUM) {\n    nftRoute(chain: $chain, senderAddress: \"\", nftTrades: []) {\n      toAddress\n    }\n  }\n`\n\nexport function getURAddress(chainId?: number, nftURAddress?: string): string | undefined {\n  if (!chainId) return undefined\n  // if mainnet and on NFT flow, use the contract address returned by GQL\n  if (chainId === ChainId.MAINNET) {\n    return nftURAddress ?? UNIVERSAL_ROUTER_ADDRESS(chainId)\n  }\n  return isSupportedChain(chainId) ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\n}\n\nexport function useNftUniversalRouterAddress() {\n  const { data, loading } = useNftUniversalRouterAddressQuery({\n    // no cache because a different version of nftRoute query is going to be called around the same time\n    fetchPolicy: 'no-cache',\n  })\n\n  return {\n    universalRouterAddress: data?.nftRoute?.toAddress,\n    universalRouterAddressIsLoading: loading,\n  }\n}\n","import { BagItem, BagItemStatus, BagStatus, RoutingItem, UpdatedGenieAsset } from 'nft/types'\n\nimport { compareAssetsWithTransactionRoute } from './txRoute/combineItemsWithTxRoute'\nimport { filterUpdatedAssetsByState } from './updatedAssets'\n\nexport function getPurchasableAssets(itemsInBag: BagItem[]): UpdatedGenieAsset[] {\n  return itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n}\n\nfunction createBagFromUpdatedAssets(\n  unavailable: UpdatedGenieAsset[],\n  priceChanged: UpdatedGenieAsset[],\n  unchanged: UpdatedGenieAsset[]\n): BagItem[] {\n  return [\n    ...unavailable.map((unavailableAsset) => ({\n      asset: unavailableAsset,\n      status: BagItemStatus.UNAVAILABLE,\n    })),\n    ...priceChanged.map((changedAsset) => ({\n      asset: changedAsset,\n      status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n    })),\n    ...unchanged.map((unchangedAsset) => ({\n      asset: unchangedAsset,\n      status: BagItemStatus.REVIEWED,\n    })),\n  ]\n}\n\nfunction evaluateNextBagState(\n  hasAssets: boolean,\n  shouldReview: boolean,\n  hasAssetsInReview: boolean,\n  shouldRefetchCalldata: boolean\n): BagStatus {\n  if (!hasAssets) {\n    return BagStatus.ADDING_TO_BAG\n  }\n\n  if (shouldReview) {\n    if (hasAssetsInReview) {\n      return BagStatus.IN_REVIEW\n    }\n\n    return BagStatus.CONFIRM_REVIEW\n  }\n\n  if (shouldRefetchCalldata) {\n    return BagStatus.CONFIRM_QUOTE\n  }\n\n  return BagStatus.CONFIRMING_IN_WALLET\n}\n\nexport function getNextBagState(\n  wishAssetsToBuy: UpdatedGenieAsset[],\n  route: RoutingItem[],\n  purchasingWithErc20: boolean\n): { newBagItems: BagItem[]; nextBagStatus: BagStatus } {\n  const { hasPriceAdjustment, updatedAssets } = compareAssetsWithTransactionRoute(wishAssetsToBuy, route)\n  const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\n\n  const { unchanged, priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets)\n\n  const hasAssets = updatedAssets.length > 0\n  const hasAssetsInReview = priceChanged.length > 0\n  const hasUnavailableAssets = unavailable.length > 0\n  const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n  const newBagItems = createBagFromUpdatedAssets(unavailable, priceChanged, unchanged)\n  const nextBagStatus = evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata)\n\n  return { newBagItems, nextBagStatus }\n}\n","import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: readonly NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { RouteResponse, UpdatedGenieAsset } from 'nft/types'\nimport { useCallback } from 'react'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\nimport { useTransactionResponse } from './useTransactionResponse'\n\nexport function usePurchaseAssets(): (\n  routingData: RouteResponse,\n  assetsToBuy: UpdatedGenieAsset[],\n  purchasingWithErc20?: boolean\n) => Promise<void> {\n  const { provider } = useWeb3React()\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse)\n\n  const {\n    setLocked: setBagLocked,\n    setBagExpanded,\n    reset: resetBag,\n  } = useBag(({ setLocked, setBagExpanded, reset }) => ({\n    setLocked,\n    setBagExpanded,\n    reset,\n  }))\n\n  return useCallback(\n    async (routingData: RouteResponse, assetsToBuy: UpdatedGenieAsset[], purchasingWithErc20 = false) => {\n      if (!provider) return\n\n      const purchaseResponse = await sendTransaction(\n        provider.getSigner(),\n        assetsToBuy,\n        routingData,\n        purchasingWithErc20\n      )\n\n      if (purchaseResponse) {\n        setBagLocked(false)\n        setTransactionResponse(purchaseResponse)\n        setBagExpanded({ bagExpanded: false })\n        resetBag()\n      }\n    },\n    [provider, resetBag, sendTransaction, setBagExpanded, setBagLocked, setTransactionResponse]\n  )\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { devtools } from 'zustand/middleware'\nimport { shallow } from 'zustand/shallow'\nimport { createWithEqualityFn } from 'zustand/traditional'\n\ninterface TokenInputState {\n  inputCurrency?: Currency\n  setInputCurrency: (currency: Currency | undefined) => void\n  clearInputCurrency: () => void\n  tokenTradeInput?: TokenTradeInput\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\n}\n\nexport const useTokenInput = createWithEqualityFn<TokenInputState>()(\n  devtools(\n    (set) => ({\n      inputCurrency: undefined,\n      tokenTradeInput: undefined,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\n    }),\n    { name: 'useTokenInput' }\n  ),\n  shallow\n)\n","import { useWeb3React } from '@web3-react/core'\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { BagStatus } from 'nft/types'\nimport { buildNftTradeInputFromBagItems, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { getNextBagState, getPurchasableAssets } from 'nft/utils/bag'\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\nimport { useCallback, useMemo } from 'react'\n\nimport { useBag } from './useBag'\nimport { usePurchaseAssets } from './usePurchaseAssets'\nimport { useTokenInput } from './useTokenInput'\n\nexport function useFetchAssets(): () => Promise<void> {\n  const { account } = useWeb3React()\n\n  const {\n    itemsInBag: uncheckedItemsInBag,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    isLocked: bagIsLocked,\n    setLocked: setBagLocked,\n    setItemsInBag,\n  } = useBag(\n    ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }) => ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    })\n  )\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n  const purchaseAssets = usePurchaseAssets()\n\n  const resetStateBeforeFetch = useCallback(() => {\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setBagLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n  }, [bagIsLocked, didOpenUnavailableAssets, setBagLocked, setBagStatus, setDidOpenUnavailableAssets])\n\n  return useCallback(async () => {\n    resetStateBeforeFetch()\n\n    fetchGqlRoute({\n      variables: {\n        senderAddress: account ? account : '',\n        nftTrades: buildNftTradeInputFromBagItems(itemsInBag),\n        tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\n      },\n      onCompleted: (data) => {\n        if (!data.nftRoute || !data.nftRoute.route) {\n          setBagStatus(BagStatus.ADDING_TO_BAG)\n          setBagLocked(false)\n          return\n        }\n\n        const wishAssetsToBuy = getPurchasableAssets(itemsInBag)\n        const purchasingWithErc20 = !!tokenTradeInput\n        const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\n\n        const { newBagItems, nextBagStatus } = getNextBagState(wishAssetsToBuy, route, purchasingWithErc20)\n\n        setItemsInBag(newBagItems)\n        setBagStatus(nextBagStatus)\n\n        if (nextBagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n          purchaseAssets(routeResponse, wishAssetsToBuy, purchasingWithErc20)\n          setBagLocked(true)\n          return\n        }\n\n        setBagLocked(false)\n      },\n    })\n  }, [\n    account,\n    fetchGqlRoute,\n    itemsInBag,\n    purchaseAssets,\n    resetStateBeforeFetch,\n    setBagLocked,\n    setBagStatus,\n    setItemsInBag,\n    tokenTradeInput,\n  ])\n}\n","import { IRoute, Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { TokenAmountInput, TokenTradeRouteInput, TradePoolInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { ClassicTrade } from 'state/routing/types'\n\ninterface SwapAmounts {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\ninterface TradeTokenInputAmounts {\n  inputAmount: TokenAmountInput\n  outputAmount: TokenAmountInput\n}\n\ninterface Swap {\n  route: IRoute<Currency, Currency, Pair | Pool>\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\n  return {\n    inputAmount: {\n      amount: swapAmounts.inputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.inputAmount.currency.isToken\n          ? swapAmounts.inputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.inputAmount.currency.chainId,\n        decimals: swapAmounts.inputAmount.currency.decimals,\n        isNative: swapAmounts.inputAmount.currency.isNative,\n      },\n    },\n    outputAmount: {\n      amount: swapAmounts.outputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.outputAmount.currency.isToken\n          ? swapAmounts.outputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.outputAmount.currency.chainId,\n        decimals: swapAmounts.outputAmount.currency.decimals,\n        isNative: swapAmounts.outputAmount.currency.isNative,\n      },\n    },\n  }\n}\n\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\n  const isPool = 'fee' in pool\n\n  return {\n    pair: !isPool\n      ? {\n          tokenAmountA: {\n            amount: pool.reserve0.quotient.toString(),\n            token: {\n              address: pool.token0.address,\n              chainId: pool.token0.chainId,\n              decimals: pool.token0.decimals,\n              isNative: pool.token0.isNative,\n            },\n          },\n          tokenAmountB: {\n            amount: pool.reserve1.quotient.toString(),\n            token: {\n              address: pool.token1.address,\n              chainId: pool.token1.chainId,\n              decimals: pool.token1.decimals,\n              isNative: pool.token1.isNative,\n            },\n          },\n        }\n      : undefined,\n    pool: isPool\n      ? {\n          fee: pool.fee,\n          liquidity: pool.liquidity.toString(),\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\n          tickCurrent: pool.tickCurrent.toString(),\n          tokenA: {\n            address: pool.token0.address,\n            chainId: pool.token0.chainId,\n            decimals: pool.token0.decimals,\n            isNative: pool.token0.isNative,\n          },\n          tokenB: {\n            address: pool.token1.address,\n            chainId: pool.token1.chainId,\n            decimals: pool.token1.decimals,\n            isNative: pool.token1.isNative,\n          },\n        }\n      : undefined,\n  }\n}\n\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\n  return pools.map((pool) => buildPool(pool))\n}\n\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\n  return {\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\n    pools: buildPools(swap.route.pools),\n  }\n}\n\nexport function buildAllTradeRouteInputs(trade: ClassicTrade): {\n  mixedTokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v2TokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v3TokenTradeRouteInputs?: TokenTradeRouteInput[]\n} {\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n\n  const swaps = trade.swaps\n\n  for (const swap of swaps) {\n    if (swap.route.protocol === Protocol.MIXED) {\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else if (swap.route.protocol === Protocol.V2) {\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else {\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    }\n  }\n\n  return {\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\n  }\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\nimport { Allowance } from 'hooks/usePermit2Allowance'\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\nimport { useEffect } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\n\nimport { useTokenInput } from './useTokenInput'\n\nexport default function usePayWithAnyTokenSwap(\n  trade?: InterfaceTrade | undefined,\n  allowance?: Allowance,\n  allowedSlippage?: Percent\n) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\n  const hasRoutes = isClassicTrade(trade) && trade.routes\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\n  const hasAllowance = !!allowedSlippage && !!allowance\n\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(undefined)\n      return\n    }\n\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\n\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\n      buildAllTradeRouteInputs(trade)\n\n    const routes: TokenTradeRoutesInput = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs,\n    }\n\n    const permitInput: PermitInput | undefined =\n      'permitSignature' in allowance && allowance.permitSignature\n        ? {\n            details: {\n              amount: allowance.permitSignature.details.amount.toString(),\n              expiration: allowance.permitSignature.details.expiration.toString(),\n              nonce: allowance.permitSignature.details.nonce.toString(),\n              token: allowance.permitSignature.details.token,\n            },\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n            signature: allowance.permitSignature.signature,\n            spender: allowance.permitSignature.spender,\n          }\n        : undefined\n\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative,\n        },\n      },\n    })\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\n}\n","import { Trans } from '@lingui/macro'\nimport { PriceImpact } from 'nft/hooks/usePriceImpact'\nimport { ReactNode } from 'react'\nimport { DefaultTheme } from 'styled-components'\n\nexport enum BuyButtonStates {\n  WALLET_NOT_CONNECTED,\n  NOT_SUPPORTED_CHAIN,\n  INSUFFICIENT_BALANCE,\n  ERROR,\n  IN_WALLET_CONFIRMATION,\n  PROCESSING_TRANSACTION,\n  FETCHING_TOKEN_ROUTE,\n  INVALID_TOKEN_ROUTE,\n  NO_TOKEN_ROUTE_FOUND,\n  LOADING_ALLOWANCE,\n  IN_WALLET_ALLOWANCE_APPROVAL,\n  PROCESSING_APPROVAL,\n  REQUIRE_APPROVAL,\n  CONFIRM_UPDATED_PRICE,\n  PRICE_IMPACT_HIGH,\n  PAY,\n}\n\nexport interface BuyButtonStateData {\n  handleClick: (() => void) | (() => Promise<void>)\n  buttonText: ReactNode\n  disabled: boolean\n  warningText?: ReactNode\n  warningTextColor: string\n  helperText?: ReactNode\n  helperTextColor: string\n  buttonColor: string\n  buttonTextColor: string\n}\n\nexport function getBuyButtonStateData(\n  buyButtonState: BuyButtonStates,\n  theme: DefaultTheme,\n  handleClickOverride?: (() => void) | (() => Promise<void>),\n  usingPayWithAnyToken?: boolean,\n  priceImpact?: PriceImpact\n): BuyButtonStateData {\n  const defaultBuyButtonState: BuyButtonStateData = {\n    handleClick: () => undefined,\n    buttonText: <Trans>Something went wrong</Trans>,\n    disabled: true,\n    warningText: undefined,\n    warningTextColor: theme.deprecated_accentWarning,\n    helperText: undefined,\n    helperTextColor: theme.neutral2,\n    buttonColor: theme.accent1,\n    buttonTextColor: theme.deprecated_accentTextLightPrimary,\n  }\n\n  const buyButtonStateData: Record<BuyButtonStates, BuyButtonStateData> = {\n    [BuyButtonStates.WALLET_NOT_CONNECTED]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Connect wallet</Trans>,\n    },\n    [BuyButtonStates.NOT_SUPPORTED_CHAIN]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      buttonText: <Trans>Switch networks</Trans>,\n      disabled: false,\n      warningText: <Trans>Wrong network</Trans>,\n    },\n    [BuyButtonStates.INSUFFICIENT_BALANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n      warningText: <Trans>Insufficient funds</Trans>,\n    },\n    [BuyButtonStates.ERROR]: {\n      ...defaultBuyButtonState,\n      warningText: <Trans>Something went wrong. Please try again.</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_CONFIRMATION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Proceed in wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_TRANSACTION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Transaction pending</Trans>,\n    },\n    [BuyButtonStates.FETCHING_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Fetching route</Trans>,\n    },\n    [BuyButtonStates.INVALID_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.NO_TOKEN_ROUTE_FOUND]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Insufficient liquidity</Trans>,\n      buttonColor: theme.surface3,\n      buttonTextColor: theme.neutral1,\n      helperText: <Trans>Insufficient pool liquidity to complete transaction</Trans>,\n    },\n    [BuyButtonStates.LOADING_ALLOWANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Loading allowance</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approve in your wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approval pending</Trans>,\n    },\n    [BuyButtonStates.REQUIRE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      disabled: false,\n      handleClick: handleClickOverride ?? (() => undefined),\n      helperText: <Trans>An approval is needed to use this token. </Trans>,\n      buttonText: <Trans>Approve</Trans>,\n    },\n    [BuyButtonStates.CONFIRM_UPDATED_PRICE]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      warningTextColor: theme.accent1,\n      warningText: <Trans>Price updated</Trans>,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.PRICE_IMPACT_HIGH]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.buttonColor,\n      helperText: <Trans>Price impact warning</Trans>,\n      helperTextColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.helperTextColor,\n      buttonText: <Trans>Pay Anyway</Trans>,\n    },\n    [BuyButtonStates.PAY]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Pay</Trans>,\n      helperText: usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined,\n    },\n  }\n\n  return buyButtonStateData[buyButtonState]\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, parseEther } from '@ethersproject/units'\nimport { Trans, t } from '@lingui/macro'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { ChainId, Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { TraceEvent, sendAnalyticsEvent } from 'analytics'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer/MiniPortfolio/hooks'\nimport Column from 'components/Column'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Row from 'components/Row'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { isSupportedChain } from 'constants/chains'\nimport { getURAddress, useNftUniversalRouterAddress } from 'graphql/data/nft/NftUniversalRouterAddress'\nimport { useCurrency } from 'hooks/Tokens'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport { useSwitchChain } from 'hooks/useSwitchChain'\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useBag } from 'nft/hooks/useBag'\nimport { useBagTotalEthPrice } from 'nft/hooks/useBagTotalEthPrice'\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\nimport { useFetchAssets } from 'nft/hooks/useFetchAssets'\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\nimport { useSubscribeTransactionState } from 'nft/hooks/useSubscribeTransactionState'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport { InterfaceTrade, TradeFillType, TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport { CurrencySearchFilters } from 'components/SearchModal/CurrencySearch'\nimport { BuyButtonStateData, BuyButtonStates, getBuyButtonStateData } from './ButtonStates'\n\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.surface3};\n  color: ${({ theme }) => theme.neutral1};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst FooterHeader = styled(Column)`\n  padding-top: 8px;\n  padding-bottom: 16px;\n`\n\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`\n\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow: hidden;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`\n\nconst HelperText = styled(ThemedText.BodySmall)<{ $color: string }>`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`\n\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`\n\nconst ActionButton = styled.button<{ $backgroundColor: string; $color: string }>`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 535;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 20px;\n  align-self: end;\n`\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`\n\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 535;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface HelperTextProps {\n  color: string\n}\n\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText data-testid=\"nft-buy-button-warning\" fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <HelperText lineHeight=\"16px\" $color={color}>\n      {children}\n    </HelperText>\n  )\n}\n\nconst BAG_FOOTER_CURRENCY_SEARCH_FILTERS: CurrencySearchFilters = {\n  onlyShowCurrenciesWithBalance: true,\n}\n\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade,\n}: {\n  usingPayWithAnyToken: boolean\n  totalEthPrice: BigNumber\n  activeCurrency?: Currency | null\n  tradeState: TradeState\n  trade?: InterfaceTrade\n}) => {\n  const { formatEther, formatNumberOrString } = useFormatter()\n\n  if (!usingPayWithAnyToken) {\n    return (\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"535\">\n        {formatEther({ input: totalEthPrice.toString(), type: NumberType.NFTToken })}\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  if (tradeState === TradeState.LOADING && !trade) {\n    return (\n      <ThemedText.BodyPrimary color=\"neutral3\" lineHeight=\"20px\" fontWeight=\"535\">\n        <Trans>Fetching price...</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <ValueText color={tradeState === TradeState.LOADING ? 'neutral3' : 'neutral1'}>\n      {formatNumberOrString({ input: trade?.inputAmount.toExact(), type: NumberType.NFTToken })}\n    </ValueText>\n  )\n}\n\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  tradeState,\n  usingPayWithAnyToken,\n}: {\n  usdcValue: CurrencyAmount<Token> | null\n  priceImpact?: PriceImpact\n  tradeState: TradeState\n  usingPayWithAnyToken: boolean\n}) => {\n  const { formatNumberOrString } = useFormatter()\n\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null\n    }\n\n    return <FiatLoadingBubble />\n  }\n\n  return (\n    <PriceImpactContainer>\n      {priceImpact && (\n        <>\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\n            <PriceImpactRow>\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\n                (<Trans>{priceImpact.displayPercentage()}</Trans>)\n              </ThemedText.BodySmall>\n            </PriceImpactRow>\n          </MouseoverTooltip>\n        </>\n      )}\n      <ThemedText.BodySmall color=\"neutral3\" lineHeight=\"20px\">\n        {`${formatNumberOrString({ input: usdcValue?.toExact(), type: NumberType.FiatNFTToken })}`}\n      </ThemedText.BodySmall>\n    </PriceImpactContainer>\n  )\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\ninterface BagFooterProps {\n  setModalIsOpen: (open: boolean) => void\n  eventProperties: Record<string, unknown>\n}\n\nexport const BagFooter = ({ setModalIsOpen, eventProperties }: BagFooterProps) => {\n  const toggleWalletDrawer = useToggleAccountDrawer()\n  const theme = useTheme()\n  const { account, chainId, connector } = useWeb3React()\n  const connected = Boolean(account && chainId)\n  const totalEthPrice = useBagTotalEthPrice()\n  const { inputCurrency } = useTokenInput(({ inputCurrency }) => ({ inputCurrency }))\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\n  const defaultCurrency = useCurrency('ETH')\n  const inputCurrencyBalance = useTokenBalance(\n    account ?? undefined,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\n  )\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  } = useBag(({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\n    isLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  }))\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n  const activeCurrency = inputCurrency ?? defaultCurrency\n  const usingPayWithAnyToken = !!inputCurrency && chainId === ChainId.MAINNET\n  const { universalRouterAddress, universalRouterAddressIsLoading } = useNftUniversalRouterAddress()\n\n  useSubscribeTransactionState(setModalIsOpen)\n  const fetchAssets = useFetchAssets()\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage,\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\n  const allowance = usePermit2Allowance(\n    maximumAmountIn,\n    getURAddress(chainId, universalRouterAddress),\n    TradeFillType.Classic\n  )\n  const loadingAllowance = allowance.state === AllowanceState.LOADING || universalRouterAddressIsLoading\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\n  const priceImpact = usePriceImpact(trade)\n\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== ChainId.MAINNET) {\n      return undefined\n    }\n\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount\n\n      if (!inputCurrencyBalance || !inputAmount) {\n        return undefined\n      }\n\n      return !inputCurrencyBalance.lessThan(inputAmount)\n    }\n\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\n\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG)\n  }, [inputCurrency, setBagStatus])\n\n  const switchChain = useSwitchChain()\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor,\n  } = useMemo((): BuyButtonStateData => {\n    if (connected && chainId !== ChainId.MAINNET) {\n      const handleClick = () => switchChain(connector, ChainId.MAINNET)\n      return getBuyButtonStateData(BuyButtonStates.NOT_SUPPORTED_CHAIN, theme, handleClick)\n    }\n\n    if (sufficientBalance === false) {\n      return getBuyButtonStateData(BuyButtonStates.INSUFFICIENT_BALANCE, theme)\n    }\n\n    if (bagStatus === BagStatus.WARNING) {\n      return getBuyButtonStateData(BuyButtonStates.ERROR, theme)\n    }\n\n    if (!connected) {\n      const handleClick = () => {\n        toggleWalletDrawer()\n        setBagExpanded({ bagExpanded: false })\n      }\n      return getBuyButtonStateData(BuyButtonStates.WALLET_NOT_CONNECTED, theme, handleClick)\n    }\n\n    if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      return getBuyButtonStateData(BuyButtonStates.IN_WALLET_CONFIRMATION, theme)\n    }\n\n    if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      return getBuyButtonStateData(BuyButtonStates.PROCESSING_TRANSACTION, theme)\n    }\n\n    if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      if (tradeState === TradeState.INVALID) {\n        return getBuyButtonStateData(BuyButtonStates.INVALID_TOKEN_ROUTE, theme)\n      }\n\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        return getBuyButtonStateData(BuyButtonStates.NO_TOKEN_ROUTE_FOUND, theme)\n      }\n\n      return getBuyButtonStateData(BuyButtonStates.FETCHING_TOKEN_ROUTE, theme)\n    }\n\n    const allowanceRequired = allowance.state === AllowanceState.REQUIRED\n    const handleClick = () => allowanceRequired && allowance.approveAndPermit()\n\n    if (loadingAllowance) {\n      return getBuyButtonStateData(BuyButtonStates.LOADING_ALLOWANCE, theme, handleClick)\n    }\n\n    if (allowanceRequired) {\n      if (allowance.isApprovalPending) {\n        return getBuyButtonStateData(BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL, theme, handleClick)\n      } else if (allowance.isApprovalLoading) {\n        return getBuyButtonStateData(BuyButtonStates.PROCESSING_APPROVAL, theme, handleClick)\n      } else {\n        return getBuyButtonStateData(BuyButtonStates.REQUIRE_APPROVAL, theme, handleClick)\n      }\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      return getBuyButtonStateData(BuyButtonStates.CONFIRM_UPDATED_PRICE, theme, fetchAssets)\n    }\n\n    if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\n      return getBuyButtonStateData(\n        BuyButtonStates.PRICE_IMPACT_HIGH,\n        theme,\n        fetchAssets,\n        usingPayWithAnyToken,\n        priceImpact\n      )\n    }\n\n    return getBuyButtonStateData(BuyButtonStates.PAY, theme, fetchAssets, usingPayWithAnyToken)\n  }, [\n    connected,\n    chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    loadingAllowance,\n    allowance,\n    priceImpact,\n    theme,\n    fetchAssets,\n    switchChain,\n    connector,\n    toggleWalletDrawer,\n    setBagExpanded,\n  ])\n\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties,\n  }\n\n  return (\n    <FooterContainer>\n      <Footer>\n        <FooterHeader gap=\"xs\">\n          <CurrencyRow>\n            <Column gap=\"xs\">\n              {isSupportedChain(chainId) && (\n                <>\n                  <ThemedText.SubHeaderSmall>\n                    <Trans>Pay with</Trans>\n                  </ThemedText.SubHeaderSmall>\n                  <CurrencyInput\n                    onClick={() => {\n                      if (!bagIsLocked) {\n                        setTokenSelectorOpen(true)\n                        sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\n                      }\n                    }}\n                  >\n                    <CurrencyLogo currency={activeCurrency} size=\"24px\" />\n                    <ThemedText.HeadlineSmall fontWeight={535} lineHeight=\"24px\">\n                      {activeCurrency?.symbol}\n                    </ThemedText.HeadlineSmall>\n                    <ChevronDown size={20} color={theme.neutral2} />\n                  </CurrencyInput>\n                </>\n              )}\n            </Column>\n            <TotalColumn gap=\"xs\">\n              <ThemedText.SubHeaderSmall>\n                <Trans>Total</Trans>\n              </ThemedText.SubHeaderSmall>\n              <InputCurrencyValue\n                usingPayWithAnyToken={usingPayWithAnyToken}\n                totalEthPrice={totalEthPrice}\n                activeCurrency={activeCurrency}\n                tradeState={tradeState}\n                trade={trade}\n              />\n            </TotalColumn>\n          </CurrencyRow>\n          <FiatValue\n            usdcValue={usdcValue}\n            priceImpact={priceImpact}\n            tradeState={tradeState}\n            usingPayWithAnyToken={usingPayWithAnyToken}\n          />\n        </FooterHeader>\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={NFTEventName.NFT_BUY_BAG_PAY}\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...traceEventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning color={warningTextColor}>{warningText}</Warning>\n          <Helper color={helperTextColor}>{helperText}</Helper>\n          <ActionButton\n            data-testid=\"nft-buy-button\"\n            onClick={handleClick}\n            disabled={disabled || isPending}\n            $backgroundColor={buttonColor}\n            $color={buttonTextColor}\n          >\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n      <CurrencySearchModal\n        isOpen={tokenSelectorOpen}\n        onDismiss={() => setTokenSelectorOpen(false)}\n        onCurrencySelect={(currency: Currency) => {\n          setInputCurrency(currency.isNative ? undefined : currency)\n          if (currency.isToken) {\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n              token_address: currency.address,\n              token_symbol: currency.symbol,\n            })\n          }\n        }}\n        selectedCurrency={activeCurrency ?? undefined}\n        currencySearchFilters={BAG_FOOTER_CURRENCY_SEARCH_FILTERS}\n      />\n    </FooterContainer>\n  )\n}\n","import { BagStatus, TxStateType } from 'nft/types'\nimport { useEffect, useRef } from 'react'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\n\nexport function useSubscribeTransactionState(setModalIsOpen: (isOpen: boolean) => void) {\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const { setBagStatus, setLocked: setBagLocked } = useBag(({ setBagExpanded, setBagStatus, setLocked }) => ({\n    setBagExpanded,\n    setBagStatus,\n    setLocked,\n  }))\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) {\n        setBagStatus(BagStatus.WARNING)\n      } else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setBagLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setBagLocked, setBagStatus, setModalIsOpen, setTransactionState, transactionStateRef.current])\n}\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useDebouncedTrade } from 'hooks/useDebouncedTrade'\nimport { useMemo } from 'react'\nimport { ClassicTrade, RouterPreference, TradeState } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade?: ClassicTrade\n  maximumAmountIn?: CurrencyAmount<Token>\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useDebouncedTrade(\n    TradeType.EXACT_OUTPUT,\n    parsedOutputAmount,\n    inputCurrency ?? undefined,\n    RouterPreference.API\n  )\n\n  const allowedSlippage = useAutoSlippageTolerance(isClassicTrade(trade) ? trade : undefined)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n","import { useMemo } from 'react'\nimport { ClassicTrade } from 'state/routing/types'\nimport { useTheme } from 'styled-components'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from 'utils/prices'\n\nexport interface PriceImpact {\n  priceImpactSeverity: PriceImpactSeverity\n  displayPercentage(): string\n}\n\ninterface PriceImpactSeverity {\n  type: 'warning' | 'error'\n  color: string\n}\n\nexport function usePriceImpact(trade?: ClassicTrade): PriceImpact | undefined {\n  const theme = useTheme()\n  const { formatPercent } = useFormatter()\n\n  return useMemo(() => {\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : undefined\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : undefined\n    const warningColor =\n      priceImpactWarning === 'error'\n        ? theme.critical\n        : priceImpactWarning === 'warning'\n        ? theme.deprecated_accentWarning\n        : undefined\n\n    return marketPriceImpact && priceImpactWarning && warningColor\n      ? {\n          priceImpactSeverity: {\n            type: priceImpactWarning,\n            color: warningColor,\n          },\n          displayPercentage: () => formatPercent(marketPriceImpact),\n        }\n      : undefined\n  }, [formatPercent, theme.critical, theme.deprecated_accentWarning, trade])\n}\n","import { Box } from 'nft/components/Box'\nimport styled, { keyframes } from 'styled-components'\n\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accent1};\n`\nexport const TimedLoader = () => {\n  const stroke = 1.5\n\n  return (\n    <Box display=\"flex\" position=\"absolute\">\n      <svg height=\"18px\" width=\"18px\">\n        <Circle\n          strokeWidth={`${stroke}`}\n          strokeLinecap=\"round\"\n          style={{\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n          }}\n          fill=\"transparent\"\n          r=\"8px\"\n          cx=\"9px\"\n          cy=\"9px\"\n        />\n      </svg>\n    </Box>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCAjRkM3MkZGODAgMCUsICNGQzcyRkY4MCAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRiOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGI6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQ==\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtZGVwcmVjYXRlZF9zdGF0ZU92ZXJsYXlIb3Zlcik7Cn0KLl8xa3Vhd2M3IHsKICBmaWx0ZXI6IGdyYXlzY2FsZSgxMDAlKTsKfQouXzFrdWF3YzkgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9Ci5fMWt1YXdjYiB7CiAgbGluZS1oZWlnaHQ6IDI0cHg7Cn0=\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetName = '_1kuawcb rgw6ezbf rgw6ezd9 rgw6ez8bh rgw6ez45r rgw6ez45l';\nexport var bagRow = '_1kuawc1 rgw6ez2dr rgw6ez2j9 rgw6ez2of rgw6ez27x rgw6ez4b9 rgw6ez3tf rgw6ez7zd rgw6ez1dr rgw6ez80x';\nexport var bagRowImage = 'rgw6ez149 rgw6ez1b9 rgw6ez49l rgw6ez80p';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3sr rgw6ezbf rgw6ezd9 rgw6ez3xr';\nexport var collectionName = 'rgw6ezd3 rgw6ezb9 rgw6eze3 rgw6ez8bh rgw6ez45l rgw6ez45r rgw6ez4bf';\nexport var grayscaleImage = '_1kuawc7';\nexport var icon = 'rgw6ez3xr';\nexport var priceChangeColumn = 'rgw6ez2p3 rgw6ez28l rgw6ezlf rgw6ezqx rgw6ez4ux rgw6ez3t3 rgw6ez4b9 rgw6ez7zp rgw6ez895 rgw6ez59f rgw6ez5yr rgw6ez1dr rgw6ez7zd';\nexport var priceChangeRow = 'rgw6ezd3 rgw6ezb9 rgw6eze3 rgw6ez4dr rgw6ez3sr';\nexport var unavailableAssetsContainer = 'rgw6ez2p3 rgw6ez28l rgw6ezlf rgw6ezqx rgw6ez4ux rgw6ez3tf rgw6ez4b9 rgw6ez7zp rgw6ez895 rgw6ez59f rgw6ez6df rgw6ez5yr rgw6ez1dr';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther as ethersFormatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/card/icons'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\n  <RemoveAssetOverlay onClick={onClick}>\n    <CircularCloseIcon />\n  </RemoveAssetOverlay>\n)\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"book\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const { formatEther, formatNumberOrString } = useFormatter()\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatEther({ input: assetEthPrice, type: NumberType.NFTToken })\n  const assetUSDPriceFormatted = formatNumberOrString({\n    input: usdPrice ? parseFloat(ethersFormatEther(assetEthPrice)) * usdPrice : usdPrice,\n    type: NumberType.FiatNFTToken,\n  })\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'neutral2' : 'neutral1'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const { formatEther } = useFormatter()\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'surface3' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatEther({\n          input: asset.priceInfo.ETHPrice,\n          type: NumberType.NFTToken,\n        })} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice?: number\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"surface1\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"neutral2\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"neutral2\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"neutral1\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","import { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent, Trace } from 'analytics'\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\nimport { Column } from 'nft/components/Flex'\nimport { useBag, useIsMobile, useNativeUsdPrice } from 'nft/hooks'\nimport { BagItemStatus, BagStatus } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useEffect, useMemo } from 'react'\n\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus)\n  const setBagStatus = useBag((s) => s.setBagStatus)\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\n  }, [uncheckedItemsInBag])\n\n  const ethUsdPrice = useNativeUsdPrice()\n\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\n      .map((item) => item.asset)\n    const priceChangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\n      .map((item) => item.asset)\n    const unavailableAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\n      .map((item) => item.asset)\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\n\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\n  }, [itemsInBag])\n\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0\n    const hasAssets = itemsInBag.length > 0\n\n    if (hasAssetsInReview)\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: ethUsdPrice,\n        bag_quantity: itemsInBag,\n        ...formatAssetEventProperties(priceChangedAssets),\n      })\n\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, ethUsdPrice])\n\n  return (\n    <>\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\n        {unavailableAssets.length > 0 && (\n          <Trace\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\n            properties={{\n              usd_value: ethUsdPrice,\n              bag_quantity: itemsInBag.length,\n              ...formatAssetEventProperties(unavailableAssets),\n            }}\n            shouldLogImpression\n          >\n            <UnavailableAssetsHeaderRow\n              assets={unavailableAssets}\n              usdPrice={ethUsdPrice}\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n              isMobile={isMobile}\n            />\n          </Trace>\n        )}\n        {priceChangedAssets.map((asset, index) => (\n          <PriceChangeBagRow\n            key={asset.id}\n            asset={asset}\n            usdPrice={ethUsdPrice}\n            markAssetAsReviewed={markAssetAsReviewed}\n            top={index === 0 && unavailableAssets.length === 0}\n            isMobile={isMobile}\n          />\n        ))}\n      </Column>\n      <Column>\n        {unchangedAssets\n          .slice(0)\n          .reverse()\n          .map((asset) => (\n            <BagRow\n              key={asset.id}\n              asset={asset}\n              usdPrice={ethUsdPrice}\n              removeAsset={removeAssetsFromBag}\n              showRemove={true}\n              isMobile={isMobile}\n            />\n          ))}\n      </Column>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { OpacityHoverState } from 'components/Common'\nimport { BagCloseIcon } from 'nft/components/icons'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { ButtonText, ThemedText } from 'theme/components'\n\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.neutral2};\n  cursor: pointer;\n  font-weight: 535;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.neutral1};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`\nconst CounterDot = styled.div<{ sizing: string }>`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accent1};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 28px;\n  text-align: center;\n`\ninterface BagHeaderProps {\n  numberOfAssets: number\n  closeBag: () => void\n  resetFlow: () => void\n  isProfilePage: boolean\n}\n\nconst BASE_SIZING = 17\nconst INCREMENTAL_SIZING = 6\n\nconst getCircleSizing = (numberOfAssets: number): string => {\n  const numberOfCharacters = numberOfAssets.toString().length\n\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\n}\n\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\n\n  return (\n    <Wrapper>\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\n      {numberOfAssets > 0 && (\n        <>\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\n          <ClearButton onClick={resetFlow}>\n            <Trans>Clear all</Trans>\n          </ClearButton>\n        </>\n      )}\n      <IconWrapper onClick={closeBag}>\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\n      </IconWrapper>\n    </Wrapper>\n  )\n}\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Center, Column } from 'nft/components/Flex'\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport styled from 'styled-components'\n\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`\n\nconst EmptyState = () => {\n  const isProfilePage = useIsNftProfilePage()\n\n  return (\n    <StyledColumn>\n      <Center>\n        {isProfilePage ? (\n          <LargeTagIcon color={themeVars.colors.neutral3} />\n        ) : (\n          <BagIcon color={themeVars.colors.neutral3} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\n        )}\n      </Center>\n      {isProfilePage ? (\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\n          No NFTs selected\n        </Center>\n      ) : (\n        <Column gap=\"16\">\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\n            Your bag is empty\n          </Center>\n          <Center fontSize=\"12\" fontWeight=\"book\" color=\"neutral2\" style={{ lineHeight: '16px' }}>\n            Selected NFTs will appear here\n          </Center>\n        </Column>\n      )}\n    </StyledColumn>\n  )\n}\n\nexport default EmptyState\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useState } from 'react'\n\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\nimport * as styles from '../BagRow.css'\n\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const isMobile = useIsMobile()\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    removeAsset(asset)\n  }\n\n  return (\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\n      <Box position=\"relative\" display=\"flex\">\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\n      </Box>\n      <Column overflow=\"hidden\" width=\"full\" color=\"neutral1\">\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\n        </Row>\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n        </Row>\n      </Column>\n      {hovered && !isMobile && (\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>\n      )}\n    </Row>\n  )\n}\n\nexport default ProfileAssetRow\n","import { Column } from 'nft/components/Flex'\nimport { useSellAsset } from 'nft/hooks'\n\nimport ProfileAssetRow from './ProfileAssetRow'\n\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  return (\n    <Column>\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\n    </Column>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent } from 'analytics'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column } from 'nft/components/Flex'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { useBag, useIsMobile, useProfilePageState, useSellAsset, useSubscribeScrollState } from 'nft/hooks'\nimport { BagStatus, ProfilePageStateType } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\nexport const BAG_WIDTH = 320\nexport const XXXL_BAG_WIDTH = 360\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.deprecated_shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ContinueButton = styled.div`\n  background: ${({ theme }) => theme.accent1};\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  margin: 32px 28px 16px;\n  padding: 10px 0px;\n  border-radius: 12px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 535;\n  line-height: 20px;\n  cursor: pointer;\n  transition: ${({ theme }) => theme.transition.duration.medium};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"24\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'surface3'}\n    borderBottomColor={top ? 'surface3' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { resetSellAssets, sellAssets } = useSellAsset(({ reset, sellAssets }) => ({\n    resetSellAssets: reset,\n    sellAssets,\n  }))\n\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState }) => ({ setProfilePageState }))\n\n  const { bagStatus, bagIsLocked, reset, bagExpanded, toggleBag, setBagExpanded } = useBag((state) => ({\n    ...state,\n    bagIsLocked: state.isLocked,\n    uncheckedItemsInBag: state.itemsInBag,\n  }))\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isModalOpen, setModalIsOpen] = useState(false)\n  const { userCanScroll, scrollRef, scrollProgress, scrollHandler } = useSubscribeScrollState()\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isModalOpen])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\n        <BagHeader\n          numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n          closeBag={handleCloseBag}\n          resetFlow={isProfilePage ? resetSellAssets : reset}\n          isProfilePage={isProfilePage}\n        />\n        {shouldRenderEmptyState && <EmptyState />}\n        <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n        <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n          {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n        </Column>\n        {hasAssetsToShow && !isProfilePage && (\n          <BagFooter setModalIsOpen={setModalIsOpen} eventProperties={eventProperties} />\n        )}\n        {isSellingAssets && isProfilePage && (\n          <ContinueButton\n            onClick={() => {\n              toggleBag()\n              setProfilePageState(ProfilePageStateType.LISTING)\n              sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n                list_quantity: sellAssets.length,\n                collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n                token_ids: sellAssets.map((asset) => asset.tokenId),\n              })\n            }}\n          >\n            <Trans>Continue</Trans>\n          </ContinueButton>\n        )}\n      </BagContainer>\n\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2ef rgw6ez2jx rgw6ez1yr rgw6ez8ct';\nexport var bagContainer = '_1jcz50r3 rgw6ez48r rgw6ez3f3 rgw6ez3iy rgw6ez16r rgw6ez1dr rgw6ez39l rgw6ez4qf rgw6ez7zx rgw6ez55f rgw6ez895 rgw6ez4b9';","import noop from 'utilities/src/react/noop'\n\nimport { Box } from '../Box'\nimport * as styles from './Overlay.css'\n\ninterface OverlayProps {\n  onClick?: () => void\n}\n\nexport const stopPropagation = (event: React.SyntheticEvent<HTMLElement>) => {\n  event.stopPropagation()\n  event.nativeEvent.stopImmediatePropagation()\n}\n\nexport const Overlay = ({ onClick = noop }: OverlayProps) => {\n  return <Box className={styles.overlay} onClick={onClick} />\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#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\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/modals/Overlay.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/modals/Overlay.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xOTlxZGw3MSB7CiAgb3BhY2l0eTogMC43MjsKICBvdmVyZmxvdzogaGlkZGVuOwogIHotaW5kZXg6IDEwMzg7Cn0=\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var overlay = '_199qdl71 rgw6ez3f3 rgw6ez343 rgw6ez17l rgw6ez1ef rgw6ez48r rgw6ez44l rgw6ez4u3';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { BagItemStatus } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { useBag } from './useBag'\n\nexport function useBagTotalEthPrice(): BigNumber {\n  const itemsInBag = useBag((state) => state.itemsInBag)\n\n  return useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n\n    return totalEthPrice\n  }, [itemsInBag])\n}\n\nexport function useBagTotalUsdPrice(): string | undefined {\n  const totalEthPrice = useBagTotalEthPrice()\n  const defaultCurrency = useCurrency('ETH')\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n\n  const usdcValue = useStablecoinValue(parsedOutputAmount)\n\n  return useMemo(() => {\n    return usdcValue?.toExact()\n  }, [usdcValue])\n}\n"],"names":["gql","getNextBagState","wishAssetsToBuy","route","purchasingWithErc20","hasPriceAdjustment","updatedAssets","compareAssetsWithTransactionRoute","shouldRefetchCalldata","unchanged","priceChanged","unavailable","filterUpdatedAssetsByState","hasAssets","length","hasAssetsInReview","hasUnavailableAssets","shouldReview","newBagItems","map","unavailableAsset","asset","status","BagItemStatus","UNAVAILABLE","changedAsset","REVIEWING_PRICE_CHANGE","unchangedAsset","REVIEWED","createBagFromUpdatedAssets","nextBagStatus","BagStatus","IN_REVIEW","CONFIRM_REVIEW","CONFIRM_QUOTE","CONFIRMING_IN_WALLET","ADDING_TO_BAG","evaluateNextBagState","buildRoutingItem","routingItem","action","RoutingActions","Buy","marketplace","toLowerCase","amountIn","price","value","assetIn","ETHPrice","baseAsset","currency","basePrice","baseDecimals","amountOut","amount","toString","assetOut","id","decimals","address","contractAddress","priceInfo","tokenType","tokenId","orderSource","buildRouteResponse","routeResponse","useErc20Token","valueToSend","undefined","sendAmount","data","calldata","to","toAddress","usePurchaseAssets","provider","useWeb3React","sendTransaction","useSendTransaction","state","setTransactionResponse","useTransactionResponse","setLocked","setBagLocked","setBagExpanded","reset","resetBag","useBag","useCallback","routingData","assetsToBuy","purchaseResponse","getSigner","bagExpanded","useTokenInput","createWithEqualityFn","devtools","set","inputCurrency","tokenTradeInput","setInputCurrency","clearInputCurrency","setTokenTradeInput","name","shallow","useFetchAssets","account","itemsInBag","uncheckedItemsInBag","setBagStatus","didOpenUnavailableAssets","setDidOpenUnavailableAssets","isLocked","bagIsLocked","setItemsInBag","useMemo","recalculateBagUsingPooledAssets","fetchGqlRoute","useNftRouteLazyQuery","purchaseAssets","resetStateBeforeFetch","FETCHING_ROUTE","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","nftRoute","filter","item","getPurchasableAssets","buildTradeRouteInput","swap","swapAmounts","inputAmount","outputAmount","quotient","token","isToken","chainId","isNative","pools","pool","isPool","pair","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","buildPool","usePayWithAnyTokenSwap","trade","allowance","allowedSlippage","hasRoutes","isClassicTrade","routes","hasInputAmount","hasAllowance","useEffect","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","swaps","protocol","Protocol","MIXED","push","V2","buildAllTradeRouteInputs","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","getBuyButtonStateData","buyButtonState","theme","handleClickOverride","usingPayWithAnyToken","priceImpact","defaultBuyButtonState","handleClick","buttonText","disabled","warningText","warningTextColor","deprecated_accentWarning","helperText","helperTextColor","neutral2","buttonColor","accent1","buttonTextColor","deprecated_accentTextLightPrimary","BuyButtonStates","WALLET_NOT_CONNECTED","NOT_SUPPORTED_CHAIN","INSUFFICIENT_BALANCE","ERROR","IN_WALLET_CONFIRMATION","PROCESSING_TRANSACTION","FETCHING_TOKEN_ROUTE","INVALID_TOKEN_ROUTE","NO_TOKEN_ROUTE_FOUND","surface3","neutral1","LOADING_ALLOWANCE","IN_WALLET_ALLOWANCE_APPROVAL","PROCESSING_APPROVAL","REQUIRE_APPROVAL","CONFIRM_UPDATED_PRICE","PRICE_IMPACT_HIGH","priceImpactSeverity","color","PAY","FooterContainer","styled","div","Footer","FooterHeader","Column","CurrencyRow","Row","TotalColumn","WarningIcon","AlertTriangle","WarningText","ThemedText","BodyPrimary","$color","HelperText","BodySmall","CurrencyInput","ActionButton","button","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","Warning","children","data-testid","fontSize","lineHeight","Helper","BAG_FOOTER_CURRENCY_SEARCH_FILTERS","onlyShowCurrenciesWithBalance","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","formatEther","formatNumberOrString","useFormatter","TradeState","LOADING","input","toExact","type","NumberType","NFTToken","fontWeight","symbol","FiatValue","usdcValue","MouseoverTooltip","text","size","style","displayPercentage","FiatNFTToken","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","FETCHING_FINAL_ROUTE","BagFooter","setModalIsOpen","eventProperties","toggleWalletDrawer","useToggleAccountDrawer","useTheme","connector","connected","Boolean","useBagTotalEthPrice","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","bagStatus","tokenSelectorOpen","setTokenSelectorOpen","useState","isPending","includes","ChainId","MAINNET","universalRouterAddress","universalRouterAddressIsLoading","loading","useNftUniversalRouterAddressQuery","fetchPolicy","useNftUniversalRouterAddress","transactionState","setTransactionState","setState","transactionStateRef","useRef","subscribe","current","TxStateType","Confirming","Denied","Invalid","WARNING","New","useSubscribeTransactionState","fetchAssets","parsedOutputAmount","tryParseCurrencyAmount","maximumAmountIn","useDebouncedTrade","TradeType","EXACT_OUTPUT","RouterPreference","API","useAutoSlippageTolerance","useDerivedPayWithAnyTokenSwapInfo","usePermit2Allowance","nftURAddress","UNIVERSAL_ROUTER_ADDRESS","isSupportedChain","getURAddress","TradeFillType","Classic","loadingAllowance","AllowanceState","formatPercent","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","critical","usePriceImpact","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","balance","balanceInEth","useWalletBalance","sufficientBalance","lessThan","parseEther","gte","switchChain","useSwitchChain","VALID","allowanceRequired","REQUIRED","approveAndPermit","isApprovalPending","isApprovalLoading","traceEventProperties","usd_value","using_erc20","gap","SubHeaderSmall","onClick","sendAnalyticsEvent","NFTEventName","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","HeadlineSmall","ChevronDown","TraceEvent","events","BrowserEvent","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","Loader","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","token_address","token_symbol","selectedCurrency","currencySearchFilters","dash","keyframes","Circle","circle","TimedLoader","Box","display","position","svg","height","width","strokeWidth","strokeLinecap","transform","transformOrigin","fill","r","cx","cy","assetName","bagRow","bagRowImage","collectionName","grayscaleImage","icon","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","CircularCloseIcon","NoContentContainer","background","className","styles","textAlign","left","top","br","BagRow","usdPrice","removeAsset","showRemove","grayscale","isMobile","loadedImage","setImageLoaded","noImageAvailable","setNoImageAvailable","smallImageUrl","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","parseFloat","ethersFormatEther","handleRemoveClick","e","preventDefault","stopPropagation","Link","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","as","src","alt","clsx","onLoad","onError","visibility","loadingBlock","overflow","whiteSpace","susFlag","Suspicious","collectionIsVerified","VerifiedIcon","emphasis","ButtonEmphasis","medium","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","BigNumber","from","gt","handleRemove","handleKeep","borderTopColor","SquareArrowUpIcon","SquareArrowDownIcon","marginLeft","marginRight","justifyContent","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","index","borderStyle","borderWidth","borderColor","borderRadius","zIndex","UnavailableAssetsHeaderRow","clearUnavailableAssets","toggleOpen","useReducer","s","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","marginBottom","cursor","bodySmall","slice","ChevronUpBagIcon","ChevronDownBagIcon","CloseTimerIcon","BagContent","removeAssetsFromBag","useIsMobile","ethUsdPrice","useNativeUsdPrice","unchangedAssets","priceChangedAssets","unavailableAssets","availableItems","ADDED_TO_BAG","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","Trace","reverse","ClearButton","ButtonText","IconWrapper","OpacityHoverState","CounterDot","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","getCircleSizing","BagCloseIcon","StyledColumn","useIsNftProfilePage","Center","LargeTagIcon","themeVars","colors","neutral3","BagIcon","subhead","useSellAsset","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","img","asset_contract","ProfileBagContent","sellAssets","ProfileAssetRow","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","surface1","deprecated_shallowShadow","raiseZIndex","Z_INDEX","modalOverTooltip","modalBackdrop","breakpoint","sm","xxxl","DetailsPageBackground","ContinueButton","transition","duration","opacity","hover","ScrollingIndicator","show","marginX","borderBottomColor","resetSellAssets","setProfilePageState","useProfilePageState","toggleBag","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","isModalOpen","userCanScroll","scrollRef","scrollProgress","scrollHandler","useSubscribeScrollState","handleCloseBag","manualClose","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","EmptyState","ref","onScroll","ProfilePageStateType","LISTING","NFT_PROFILE_PAGE_START_SELL","list_quantity","collection_addresses","token_ids","Overlay","event","nativeEvent","stopImmediatePropagation","noop","reduce","total","add","useBagTotalUsdPrice"],"sourceRoot":""}