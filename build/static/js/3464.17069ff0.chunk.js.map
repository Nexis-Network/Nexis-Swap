{"version":3,"file":"static/js/3464.17069ff0.chunk.js","mappings":"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","sources":["graphql/data/nft/NftUniversalRouterAddress.ts","nft/utils/bag.ts","nft/utils/nftRoute.ts","nft/hooks/usePurchaseAssets.ts","nft/hooks/useTokenInput.ts","nft/hooks/useFetchAssets.ts","nft/utils/tokenRoutes.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/components/bag/ButtonStates.tsx","nft/components/bag/BagFooter.tsx","nft/hooks/useSubscribeTransactionState.ts","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts","nft/components/modals/Overlay.tsx","nft/components/modals/Overlay.css.ts","nft/hooks/useBagTotalEthPrice.ts"],"sourcesContent":["import { ChainId } from '@uniswap/sdk-core'\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { isSupportedChain } from 'constants/chains'\nimport gql from 'graphql-tag'\n\nimport { useNftUniversalRouterAddressQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query NftUniversalRouterAddress($chain: Chain = ETHEREUM) {\n    nftRoute(chain: $chain, senderAddress: \"\", nftTrades: []) {\n      toAddress\n    }\n  }\n`\n\nexport function getURAddress(chainId?: number, nftURAddress?: string): string | undefined {\n  if (!chainId) return undefined\n  // if mainnet and on NFT flow, use the contract address returned by GQL\n  if (chainId === ChainId.MAINNET) {\n    return nftURAddress ?? UNIVERSAL_ROUTER_ADDRESS(chainId)\n  }\n  return isSupportedChain(chainId) ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\n}\n\nexport function useNftUniversalRouterAddress() {\n  const { data, loading } = useNftUniversalRouterAddressQuery({\n    // no cache because a different version of nftRoute query is going to be called around the same time\n    fetchPolicy: 'no-cache',\n  })\n\n  return {\n    universalRouterAddress: data?.nftRoute?.toAddress,\n    universalRouterAddressIsLoading: loading,\n  }\n}\n","import { BagItem, BagItemStatus, BagStatus, RoutingItem, UpdatedGenieAsset } from 'nft/types'\n\nimport { compareAssetsWithTransactionRoute } from './txRoute/combineItemsWithTxRoute'\nimport { filterUpdatedAssetsByState } from './updatedAssets'\n\nexport function getPurchasableAssets(itemsInBag: BagItem[]): UpdatedGenieAsset[] {\n  return itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n}\n\nfunction createBagFromUpdatedAssets(\n  unavailable: UpdatedGenieAsset[],\n  priceChanged: UpdatedGenieAsset[],\n  unchanged: UpdatedGenieAsset[]\n): BagItem[] {\n  return [\n    ...unavailable.map((unavailableAsset) => ({\n      asset: unavailableAsset,\n      status: BagItemStatus.UNAVAILABLE,\n    })),\n    ...priceChanged.map((changedAsset) => ({\n      asset: changedAsset,\n      status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n    })),\n    ...unchanged.map((unchangedAsset) => ({\n      asset: unchangedAsset,\n      status: BagItemStatus.REVIEWED,\n    })),\n  ]\n}\n\nfunction evaluateNextBagState(\n  hasAssets: boolean,\n  shouldReview: boolean,\n  hasAssetsInReview: boolean,\n  shouldRefetchCalldata: boolean\n): BagStatus {\n  if (!hasAssets) {\n    return BagStatus.ADDING_TO_BAG\n  }\n\n  if (shouldReview) {\n    if (hasAssetsInReview) {\n      return BagStatus.IN_REVIEW\n    }\n\n    return BagStatus.CONFIRM_REVIEW\n  }\n\n  if (shouldRefetchCalldata) {\n    return BagStatus.CONFIRM_QUOTE\n  }\n\n  return BagStatus.CONFIRMING_IN_WALLET\n}\n\nexport function getNextBagState(\n  wishAssetsToBuy: UpdatedGenieAsset[],\n  route: RoutingItem[],\n  purchasingWithErc20: boolean\n): { newBagItems: BagItem[]; nextBagStatus: BagStatus } {\n  const { hasPriceAdjustment, updatedAssets } = compareAssetsWithTransactionRoute(wishAssetsToBuy, route)\n  const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\n\n  const { unchanged, priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets)\n\n  const hasAssets = updatedAssets.length > 0\n  const hasAssetsInReview = priceChanged.length > 0\n  const hasUnavailableAssets = unavailable.length > 0\n  const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n  const newBagItems = createBagFromUpdatedAssets(unavailable, priceChanged, unchanged)\n  const nextBagStatus = evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata)\n\n  return { newBagItems, nextBagStatus }\n}\n","import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: readonly NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { RouteResponse, UpdatedGenieAsset } from 'nft/types'\nimport { useCallback } from 'react'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\nimport { useTransactionResponse } from './useTransactionResponse'\n\nexport function usePurchaseAssets(): (\n  routingData: RouteResponse,\n  assetsToBuy: UpdatedGenieAsset[],\n  purchasingWithErc20?: boolean\n) => Promise<void> {\n  const { provider } = useWeb3React()\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse)\n\n  const {\n    setLocked: setBagLocked,\n    setBagExpanded,\n    reset: resetBag,\n  } = useBag(({ setLocked, setBagExpanded, reset }) => ({\n    setLocked,\n    setBagExpanded,\n    reset,\n  }))\n\n  return useCallback(\n    async (routingData: RouteResponse, assetsToBuy: UpdatedGenieAsset[], purchasingWithErc20 = false) => {\n      if (!provider) return\n\n      const purchaseResponse = await sendTransaction(\n        provider.getSigner(),\n        assetsToBuy,\n        routingData,\n        purchasingWithErc20\n      )\n\n      if (purchaseResponse) {\n        setBagLocked(false)\n        setTransactionResponse(purchaseResponse)\n        setBagExpanded({ bagExpanded: false })\n        resetBag()\n      }\n    },\n    [provider, resetBag, sendTransaction, setBagExpanded, setBagLocked, setTransactionResponse]\n  )\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { devtools } from 'zustand/middleware'\nimport { shallow } from 'zustand/shallow'\nimport { createWithEqualityFn } from 'zustand/traditional'\n\ninterface TokenInputState {\n  inputCurrency?: Currency\n  setInputCurrency: (currency: Currency | undefined) => void\n  clearInputCurrency: () => void\n  tokenTradeInput?: TokenTradeInput\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\n}\n\nexport const useTokenInput = createWithEqualityFn<TokenInputState>()(\n  devtools(\n    (set) => ({\n      inputCurrency: undefined,\n      tokenTradeInput: undefined,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\n    }),\n    { name: 'useTokenInput' }\n  ),\n  shallow\n)\n","import { useWeb3React } from '@web3-react/core'\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { BagStatus } from 'nft/types'\nimport { buildNftTradeInputFromBagItems, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { getNextBagState, getPurchasableAssets } from 'nft/utils/bag'\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\nimport { useCallback, useMemo } from 'react'\n\nimport { useBag } from './useBag'\nimport { usePurchaseAssets } from './usePurchaseAssets'\nimport { useTokenInput } from './useTokenInput'\n\nexport function useFetchAssets(): () => Promise<void> {\n  const { account } = useWeb3React()\n\n  const {\n    itemsInBag: uncheckedItemsInBag,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    isLocked: bagIsLocked,\n    setLocked: setBagLocked,\n    setItemsInBag,\n  } = useBag(\n    ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }) => ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    })\n  )\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n  const purchaseAssets = usePurchaseAssets()\n\n  const resetStateBeforeFetch = useCallback(() => {\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setBagLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n  }, [bagIsLocked, didOpenUnavailableAssets, setBagLocked, setBagStatus, setDidOpenUnavailableAssets])\n\n  return useCallback(async () => {\n    resetStateBeforeFetch()\n\n    fetchGqlRoute({\n      variables: {\n        senderAddress: account ? account : '',\n        nftTrades: buildNftTradeInputFromBagItems(itemsInBag),\n        tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\n      },\n      onCompleted: (data) => {\n        if (!data.nftRoute || !data.nftRoute.route) {\n          setBagStatus(BagStatus.ADDING_TO_BAG)\n          setBagLocked(false)\n          return\n        }\n\n        const wishAssetsToBuy = getPurchasableAssets(itemsInBag)\n        const purchasingWithErc20 = !!tokenTradeInput\n        const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\n\n        const { newBagItems, nextBagStatus } = getNextBagState(wishAssetsToBuy, route, purchasingWithErc20)\n\n        setItemsInBag(newBagItems)\n        setBagStatus(nextBagStatus)\n\n        if (nextBagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n          purchaseAssets(routeResponse, wishAssetsToBuy, purchasingWithErc20)\n          setBagLocked(true)\n          return\n        }\n\n        setBagLocked(false)\n      },\n    })\n  }, [\n    account,\n    fetchGqlRoute,\n    itemsInBag,\n    purchaseAssets,\n    resetStateBeforeFetch,\n    setBagLocked,\n    setBagStatus,\n    setItemsInBag,\n    tokenTradeInput,\n  ])\n}\n","import { IRoute, Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { TokenAmountInput, TokenTradeRouteInput, TradePoolInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { ClassicTrade } from 'state/routing/types'\n\ninterface SwapAmounts {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\ninterface TradeTokenInputAmounts {\n  inputAmount: TokenAmountInput\n  outputAmount: TokenAmountInput\n}\n\ninterface Swap {\n  route: IRoute<Currency, Currency, Pair | Pool>\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\n  return {\n    inputAmount: {\n      amount: swapAmounts.inputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.inputAmount.currency.isToken\n          ? swapAmounts.inputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.inputAmount.currency.chainId,\n        decimals: swapAmounts.inputAmount.currency.decimals,\n        isNative: swapAmounts.inputAmount.currency.isNative,\n      },\n    },\n    outputAmount: {\n      amount: swapAmounts.outputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.outputAmount.currency.isToken\n          ? swapAmounts.outputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.outputAmount.currency.chainId,\n        decimals: swapAmounts.outputAmount.currency.decimals,\n        isNative: swapAmounts.outputAmount.currency.isNative,\n      },\n    },\n  }\n}\n\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\n  const isPool = 'fee' in pool\n\n  return {\n    pair: !isPool\n      ? {\n          tokenAmountA: {\n            amount: pool.reserve0.quotient.toString(),\n            token: {\n              address: pool.token0.address,\n              chainId: pool.token0.chainId,\n              decimals: pool.token0.decimals,\n              isNative: pool.token0.isNative,\n            },\n          },\n          tokenAmountB: {\n            amount: pool.reserve1.quotient.toString(),\n            token: {\n              address: pool.token1.address,\n              chainId: pool.token1.chainId,\n              decimals: pool.token1.decimals,\n              isNative: pool.token1.isNative,\n            },\n          },\n        }\n      : undefined,\n    pool: isPool\n      ? {\n          fee: pool.fee,\n          liquidity: pool.liquidity.toString(),\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\n          tickCurrent: pool.tickCurrent.toString(),\n          tokenA: {\n            address: pool.token0.address,\n            chainId: pool.token0.chainId,\n            decimals: pool.token0.decimals,\n            isNative: pool.token0.isNative,\n          },\n          tokenB: {\n            address: pool.token1.address,\n            chainId: pool.token1.chainId,\n            decimals: pool.token1.decimals,\n            isNative: pool.token1.isNative,\n          },\n        }\n      : undefined,\n  }\n}\n\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\n  return pools.map((pool) => buildPool(pool))\n}\n\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\n  return {\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\n    pools: buildPools(swap.route.pools),\n  }\n}\n\nexport function buildAllTradeRouteInputs(trade: ClassicTrade): {\n  mixedTokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v2TokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v3TokenTradeRouteInputs?: TokenTradeRouteInput[]\n} {\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n\n  const swaps = trade.swaps\n\n  for (const swap of swaps) {\n    if (swap.route.protocol === Protocol.MIXED) {\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else if (swap.route.protocol === Protocol.V2) {\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else {\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    }\n  }\n\n  return {\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\n  }\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\nimport { Allowance } from 'hooks/usePermit2Allowance'\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\nimport { useEffect } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\n\nimport { useTokenInput } from './useTokenInput'\n\nexport default function usePayWithAnyTokenSwap(\n  trade?: InterfaceTrade | undefined,\n  allowance?: Allowance,\n  allowedSlippage?: Percent\n) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\n  const hasRoutes = isClassicTrade(trade) && trade.routes\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\n  const hasAllowance = !!allowedSlippage && !!allowance\n\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(undefined)\n      return\n    }\n\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\n\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\n      buildAllTradeRouteInputs(trade)\n\n    const routes: TokenTradeRoutesInput = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs,\n    }\n\n    const permitInput: PermitInput | undefined =\n      'permitSignature' in allowance && allowance.permitSignature\n        ? {\n            details: {\n              amount: allowance.permitSignature.details.amount.toString(),\n              expiration: allowance.permitSignature.details.expiration.toString(),\n              nonce: allowance.permitSignature.details.nonce.toString(),\n              token: allowance.permitSignature.details.token,\n            },\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n            signature: allowance.permitSignature.signature,\n            spender: allowance.permitSignature.spender,\n          }\n        : undefined\n\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative,\n        },\n      },\n    })\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\n}\n","import { Trans } from '@lingui/macro'\nimport { PriceImpact } from 'nft/hooks/usePriceImpact'\nimport { ReactNode } from 'react'\nimport { DefaultTheme } from 'styled-components'\n\nexport enum BuyButtonStates {\n  WALLET_NOT_CONNECTED,\n  NOT_SUPPORTED_CHAIN,\n  INSUFFICIENT_BALANCE,\n  ERROR,\n  IN_WALLET_CONFIRMATION,\n  PROCESSING_TRANSACTION,\n  FETCHING_TOKEN_ROUTE,\n  INVALID_TOKEN_ROUTE,\n  NO_TOKEN_ROUTE_FOUND,\n  LOADING_ALLOWANCE,\n  IN_WALLET_ALLOWANCE_APPROVAL,\n  PROCESSING_APPROVAL,\n  REQUIRE_APPROVAL,\n  CONFIRM_UPDATED_PRICE,\n  PRICE_IMPACT_HIGH,\n  PAY,\n}\n\nexport interface BuyButtonStateData {\n  handleClick: (() => void) | (() => Promise<void>)\n  buttonText: ReactNode\n  disabled: boolean\n  warningText?: ReactNode\n  warningTextColor: string\n  helperText?: ReactNode\n  helperTextColor: string\n  buttonColor: string\n  buttonTextColor: string\n}\n\nexport function getBuyButtonStateData(\n  buyButtonState: BuyButtonStates,\n  theme: DefaultTheme,\n  handleClickOverride?: (() => void) | (() => Promise<void>),\n  usingPayWithAnyToken?: boolean,\n  priceImpact?: PriceImpact\n): BuyButtonStateData {\n  const defaultBuyButtonState: BuyButtonStateData = {\n    handleClick: () => undefined,\n    buttonText: <Trans>Something went wrong</Trans>,\n    disabled: true,\n    warningText: undefined,\n    warningTextColor: theme.deprecated_accentWarning,\n    helperText: undefined,\n    helperTextColor: theme.neutral2,\n    buttonColor: theme.accent1,\n    buttonTextColor: theme.deprecated_accentTextLightPrimary,\n  }\n\n  const buyButtonStateData: Record<BuyButtonStates, BuyButtonStateData> = {\n    [BuyButtonStates.WALLET_NOT_CONNECTED]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Connect wallet</Trans>,\n    },\n    [BuyButtonStates.NOT_SUPPORTED_CHAIN]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      buttonText: <Trans>Switch networks</Trans>,\n      disabled: false,\n      warningText: <Trans>Wrong network</Trans>,\n    },\n    [BuyButtonStates.INSUFFICIENT_BALANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n      warningText: <Trans>Insufficient funds</Trans>,\n    },\n    [BuyButtonStates.ERROR]: {\n      ...defaultBuyButtonState,\n      warningText: <Trans>Something went wrong. Please try again.</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_CONFIRMATION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Proceed in wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_TRANSACTION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Transaction pending</Trans>,\n    },\n    [BuyButtonStates.FETCHING_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Fetching route</Trans>,\n    },\n    [BuyButtonStates.INVALID_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.NO_TOKEN_ROUTE_FOUND]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Insufficient liquidity</Trans>,\n      buttonColor: theme.surface3,\n      buttonTextColor: theme.neutral1,\n      helperText: <Trans>Insufficient pool liquidity to complete transaction</Trans>,\n    },\n    [BuyButtonStates.LOADING_ALLOWANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Loading allowance</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approve in your wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approval pending</Trans>,\n    },\n    [BuyButtonStates.REQUIRE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      disabled: false,\n      handleClick: handleClickOverride ?? (() => undefined),\n      helperText: <Trans>An approval is needed to use this token. </Trans>,\n      buttonText: <Trans>Approve</Trans>,\n    },\n    [BuyButtonStates.CONFIRM_UPDATED_PRICE]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      warningTextColor: theme.accent1,\n      warningText: <Trans>Price updated</Trans>,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.PRICE_IMPACT_HIGH]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.buttonColor,\n      helperText: <Trans>Price impact warning</Trans>,\n      helperTextColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.helperTextColor,\n      buttonText: <Trans>Pay Anyway</Trans>,\n    },\n    [BuyButtonStates.PAY]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Pay</Trans>,\n      helperText: usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined,\n    },\n  }\n\n  return buyButtonStateData[buyButtonState]\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, parseEther } from '@ethersproject/units'\nimport { Trans, t } from '@lingui/macro'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { ChainId, Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { TraceEvent, sendAnalyticsEvent } from 'analytics'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer/MiniPortfolio/hooks'\nimport Column from 'components/Column'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Row from 'components/Row'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { isSupportedChain } from 'constants/chains'\nimport { getURAddress, useNftUniversalRouterAddress } from 'graphql/data/nft/NftUniversalRouterAddress'\nimport { useCurrency } from 'hooks/Tokens'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport { useSwitchChain } from 'hooks/useSwitchChain'\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useBag } from 'nft/hooks/useBag'\nimport { useBagTotalEthPrice } from 'nft/hooks/useBagTotalEthPrice'\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\nimport { useFetchAssets } from 'nft/hooks/useFetchAssets'\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\nimport { useSubscribeTransactionState } from 'nft/hooks/useSubscribeTransactionState'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport { InterfaceTrade, TradeFillType, TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport { CurrencySearchFilters } from 'components/SearchModal/CurrencySearch'\nimport { BuyButtonStateData, BuyButtonStates, getBuyButtonStateData } from './ButtonStates'\n\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.surface3};\n  color: ${({ theme }) => theme.neutral1};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst FooterHeader = styled(Column)`\n  padding-top: 8px;\n  padding-bottom: 16px;\n`\n\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`\n\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow: hidden;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`\n\nconst HelperText = styled(ThemedText.BodySmall)<{ $color: string }>`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`\n\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`\n\nconst ActionButton = styled.button<{ $backgroundColor: string; $color: string }>`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 535;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 20px;\n  align-self: end;\n`\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`\n\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 535;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface HelperTextProps {\n  color: string\n}\n\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText data-testid=\"nft-buy-button-warning\" fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <HelperText lineHeight=\"16px\" $color={color}>\n      {children}\n    </HelperText>\n  )\n}\n\nconst BAG_FOOTER_CURRENCY_SEARCH_FILTERS: CurrencySearchFilters = {\n  onlyShowCurrenciesWithBalance: true,\n}\n\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade,\n}: {\n  usingPayWithAnyToken: boolean\n  totalEthPrice: BigNumber\n  activeCurrency?: Currency | null\n  tradeState: TradeState\n  trade?: InterfaceTrade\n}) => {\n  const { formatEther, formatNumberOrString } = useFormatter()\n\n  if (!usingPayWithAnyToken) {\n    return (\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"535\">\n        {formatEther({ input: totalEthPrice.toString(), type: NumberType.NFTToken })}\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  if (tradeState === TradeState.LOADING && !trade) {\n    return (\n      <ThemedText.BodyPrimary color=\"neutral3\" lineHeight=\"20px\" fontWeight=\"535\">\n        <Trans>Fetching price...</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <ValueText color={tradeState === TradeState.LOADING ? 'neutral3' : 'neutral1'}>\n      {formatNumberOrString({ input: trade?.inputAmount.toExact(), type: NumberType.NFTToken })}\n    </ValueText>\n  )\n}\n\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  tradeState,\n  usingPayWithAnyToken,\n}: {\n  usdcValue: CurrencyAmount<Token> | null\n  priceImpact?: PriceImpact\n  tradeState: TradeState\n  usingPayWithAnyToken: boolean\n}) => {\n  const { formatNumberOrString } = useFormatter()\n\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null\n    }\n\n    return <FiatLoadingBubble />\n  }\n\n  return (\n    <PriceImpactContainer>\n      {priceImpact && (\n        <>\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\n            <PriceImpactRow>\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\n                (<Trans>{priceImpact.displayPercentage()}</Trans>)\n              </ThemedText.BodySmall>\n            </PriceImpactRow>\n          </MouseoverTooltip>\n        </>\n      )}\n      <ThemedText.BodySmall color=\"neutral3\" lineHeight=\"20px\">\n        {`${formatNumberOrString({ input: usdcValue?.toExact(), type: NumberType.FiatNFTToken })}`}\n      </ThemedText.BodySmall>\n    </PriceImpactContainer>\n  )\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\ninterface BagFooterProps {\n  setModalIsOpen: (open: boolean) => void\n  eventProperties: Record<string, unknown>\n}\n\nexport const BagFooter = ({ setModalIsOpen, eventProperties }: BagFooterProps) => {\n  const toggleWalletDrawer = useToggleAccountDrawer()\n  const theme = useTheme()\n  const { account, chainId, connector } = useWeb3React()\n  const connected = Boolean(account && chainId)\n  const totalEthPrice = useBagTotalEthPrice()\n  const { inputCurrency } = useTokenInput(({ inputCurrency }) => ({ inputCurrency }))\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\n  const defaultCurrency = useCurrency('ETH')\n  const inputCurrencyBalance = useTokenBalance(\n    account ?? undefined,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\n  )\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  } = useBag(({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\n    isLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  }))\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n  const activeCurrency = inputCurrency ?? defaultCurrency\n  const usingPayWithAnyToken = !!inputCurrency && chainId === ChainId.MAINNET\n  const { universalRouterAddress, universalRouterAddressIsLoading } = useNftUniversalRouterAddress()\n\n  useSubscribeTransactionState(setModalIsOpen)\n  const fetchAssets = useFetchAssets()\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage,\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\n  const allowance = usePermit2Allowance(\n    maximumAmountIn,\n    getURAddress(chainId, universalRouterAddress),\n    TradeFillType.Classic\n  )\n  const loadingAllowance = allowance.state === AllowanceState.LOADING || universalRouterAddressIsLoading\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\n  const priceImpact = usePriceImpact(trade)\n\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== ChainId.MAINNET) {\n      return undefined\n    }\n\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount\n\n      if (!inputCurrencyBalance || !inputAmount) {\n        return undefined\n      }\n\n      return !inputCurrencyBalance.lessThan(inputAmount)\n    }\n\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\n\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG)\n  }, [inputCurrency, setBagStatus])\n\n  const switchChain = useSwitchChain()\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor,\n  } = useMemo((): BuyButtonStateData => {\n    if (connected && chainId !== ChainId.MAINNET) {\n      const handleClick = () => switchChain(connector, ChainId.MAINNET)\n      return getBuyButtonStateData(BuyButtonStates.NOT_SUPPORTED_CHAIN, theme, handleClick)\n    }\n\n    if (sufficientBalance === false) {\n      return getBuyButtonStateData(BuyButtonStates.INSUFFICIENT_BALANCE, theme)\n    }\n\n    if (bagStatus === BagStatus.WARNING) {\n      return getBuyButtonStateData(BuyButtonStates.ERROR, theme)\n    }\n\n    if (!connected) {\n      const handleClick = () => {\n        toggleWalletDrawer()\n        setBagExpanded({ bagExpanded: false })\n      }\n      return getBuyButtonStateData(BuyButtonStates.WALLET_NOT_CONNECTED, theme, handleClick)\n    }\n\n    if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      return getBuyButtonStateData(BuyButtonStates.IN_WALLET_CONFIRMATION, theme)\n    }\n\n    if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      return getBuyButtonStateData(BuyButtonStates.PROCESSING_TRANSACTION, theme)\n    }\n\n    if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      if (tradeState === TradeState.INVALID) {\n        return getBuyButtonStateData(BuyButtonStates.INVALID_TOKEN_ROUTE, theme)\n      }\n\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        return getBuyButtonStateData(BuyButtonStates.NO_TOKEN_ROUTE_FOUND, theme)\n      }\n\n      return getBuyButtonStateData(BuyButtonStates.FETCHING_TOKEN_ROUTE, theme)\n    }\n\n    const allowanceRequired = allowance.state === AllowanceState.REQUIRED\n    const handleClick = () => allowanceRequired && allowance.approveAndPermit()\n\n    if (loadingAllowance) {\n      return getBuyButtonStateData(BuyButtonStates.LOADING_ALLOWANCE, theme, handleClick)\n    }\n\n    if (allowanceRequired) {\n      if (allowance.isApprovalPending) {\n        return getBuyButtonStateData(BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL, theme, handleClick)\n      } else if (allowance.isApprovalLoading) {\n        return getBuyButtonStateData(BuyButtonStates.PROCESSING_APPROVAL, theme, handleClick)\n      } else {\n        return getBuyButtonStateData(BuyButtonStates.REQUIRE_APPROVAL, theme, handleClick)\n      }\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      return getBuyButtonStateData(BuyButtonStates.CONFIRM_UPDATED_PRICE, theme, fetchAssets)\n    }\n\n    if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\n      return getBuyButtonStateData(\n        BuyButtonStates.PRICE_IMPACT_HIGH,\n        theme,\n        fetchAssets,\n        usingPayWithAnyToken,\n        priceImpact\n      )\n    }\n\n    return getBuyButtonStateData(BuyButtonStates.PAY, theme, fetchAssets, usingPayWithAnyToken)\n  }, [\n    connected,\n    chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    loadingAllowance,\n    allowance,\n    priceImpact,\n    theme,\n    fetchAssets,\n    switchChain,\n    connector,\n    toggleWalletDrawer,\n    setBagExpanded,\n  ])\n\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties,\n  }\n\n  return (\n    <FooterContainer>\n      <Footer>\n        <FooterHeader gap=\"xs\">\n          <CurrencyRow>\n            <Column gap=\"xs\">\n              {isSupportedChain(chainId) && (\n                <>\n                  <ThemedText.SubHeaderSmall>\n                    <Trans>Pay with</Trans>\n                  </ThemedText.SubHeaderSmall>\n                  <CurrencyInput\n                    onClick={() => {\n                      if (!bagIsLocked) {\n                        setTokenSelectorOpen(true)\n                        sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\n                      }\n                    }}\n                  >\n                    <CurrencyLogo currency={activeCurrency} size=\"24px\" />\n                    <ThemedText.HeadlineSmall fontWeight={535} lineHeight=\"24px\">\n                      {activeCurrency?.symbol}\n                    </ThemedText.HeadlineSmall>\n                    <ChevronDown size={20} color={theme.neutral2} />\n                  </CurrencyInput>\n                </>\n              )}\n            </Column>\n            <TotalColumn gap=\"xs\">\n              <ThemedText.SubHeaderSmall>\n                <Trans>Total</Trans>\n              </ThemedText.SubHeaderSmall>\n              <InputCurrencyValue\n                usingPayWithAnyToken={usingPayWithAnyToken}\n                totalEthPrice={totalEthPrice}\n                activeCurrency={activeCurrency}\n                tradeState={tradeState}\n                trade={trade}\n              />\n            </TotalColumn>\n          </CurrencyRow>\n          <FiatValue\n            usdcValue={usdcValue}\n            priceImpact={priceImpact}\n            tradeState={tradeState}\n            usingPayWithAnyToken={usingPayWithAnyToken}\n          />\n        </FooterHeader>\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={NFTEventName.NFT_BUY_BAG_PAY}\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...traceEventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning color={warningTextColor}>{warningText}</Warning>\n          <Helper color={helperTextColor}>{helperText}</Helper>\n          <ActionButton\n            data-testid=\"nft-buy-button\"\n            onClick={handleClick}\n            disabled={disabled || isPending}\n            $backgroundColor={buttonColor}\n            $color={buttonTextColor}\n          >\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n      <CurrencySearchModal\n        isOpen={tokenSelectorOpen}\n        onDismiss={() => setTokenSelectorOpen(false)}\n        onCurrencySelect={(currency: Currency) => {\n          setInputCurrency(currency.isNative ? undefined : currency)\n          if (currency.isToken) {\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n              token_address: currency.address,\n              token_symbol: currency.symbol,\n            })\n          }\n        }}\n        selectedCurrency={activeCurrency ?? undefined}\n        currencySearchFilters={BAG_FOOTER_CURRENCY_SEARCH_FILTERS}\n      />\n    </FooterContainer>\n  )\n}\n","import { BagStatus, TxStateType } from 'nft/types'\nimport { useEffect, useRef } from 'react'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\n\nexport function useSubscribeTransactionState(setModalIsOpen: (isOpen: boolean) => void) {\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const { setBagStatus, setLocked: setBagLocked } = useBag(({ setBagExpanded, setBagStatus, setLocked }) => ({\n    setBagExpanded,\n    setBagStatus,\n    setLocked,\n  }))\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) {\n        setBagStatus(BagStatus.WARNING)\n      } else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setBagLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setBagLocked, setBagStatus, setModalIsOpen, setTransactionState, transactionStateRef.current])\n}\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useDebouncedTrade } from 'hooks/useDebouncedTrade'\nimport { useMemo } from 'react'\nimport { ClassicTrade, RouterPreference, TradeState } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade?: ClassicTrade\n  maximumAmountIn?: CurrencyAmount<Token>\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useDebouncedTrade(\n    TradeType.EXACT_OUTPUT,\n    parsedOutputAmount,\n    inputCurrency ?? undefined,\n    RouterPreference.API\n  )\n\n  const allowedSlippage = useAutoSlippageTolerance(isClassicTrade(trade) ? trade : undefined)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n","import { useMemo } from 'react'\nimport { ClassicTrade } from 'state/routing/types'\nimport { useTheme } from 'styled-components'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from 'utils/prices'\n\nexport interface PriceImpact {\n  priceImpactSeverity: PriceImpactSeverity\n  displayPercentage(): string\n}\n\ninterface PriceImpactSeverity {\n  type: 'warning' | 'error'\n  color: string\n}\n\nexport function usePriceImpact(trade?: ClassicTrade): PriceImpact | undefined {\n  const theme = useTheme()\n  const { formatPercent } = useFormatter()\n\n  return useMemo(() => {\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : undefined\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : undefined\n    const warningColor =\n      priceImpactWarning === 'error'\n        ? theme.critical\n        : priceImpactWarning === 'warning'\n        ? theme.deprecated_accentWarning\n        : undefined\n\n    return marketPriceImpact && priceImpactWarning && warningColor\n      ? {\n          priceImpactSeverity: {\n            type: priceImpactWarning,\n            color: warningColor,\n          },\n          displayPercentage: () => formatPercent(marketPriceImpact),\n        }\n      : undefined\n  }, [formatPercent, theme.critical, theme.deprecated_accentWarning, trade])\n}\n","import { Box } from 'nft/components/Box'\nimport styled, { keyframes } from 'styled-components'\n\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accent1};\n`\nexport const TimedLoader = () => {\n  const stroke = 1.5\n\n  return (\n    <Box display=\"flex\" position=\"absolute\">\n      <svg height=\"18px\" width=\"18px\">\n        <Circle\n          strokeWidth={`${stroke}`}\n          strokeLinecap=\"round\"\n          style={{\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n          }}\n          fill=\"transparent\"\n          r=\"8px\"\n          cx=\"9px\"\n          cy=\"9px\"\n        />\n      </svg>\n    </Box>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#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\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCAjRkM3MkZGODAgMCUsICNGQzcyRkY4MCAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRiOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGI6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQ==\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtZGVwcmVjYXRlZF9zdGF0ZU92ZXJsYXlIb3Zlcik7Cn0KLl8xa3Vhd2M3IHsKICBmaWx0ZXI6IGdyYXlzY2FsZSgxMDAlKTsKfQouXzFrdWF3YzkgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9Ci5fMWt1YXdjYiB7CiAgbGluZS1oZWlnaHQ6IDI0cHg7Cn0=\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetName = '_1kuawcb rgw6ezbf rgw6ezd9 rgw6ez8bh rgw6ez45r rgw6ez45l';\nexport var bagRow = '_1kuawc1 rgw6ez2dr rgw6ez2j9 rgw6ez2of rgw6ez27x rgw6ez4b9 rgw6ez3tf rgw6ez7zd rgw6ez1dr rgw6ez80x';\nexport var bagRowImage = 'rgw6ez149 rgw6ez1b9 rgw6ez49l rgw6ez80p';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3sr rgw6ezbf rgw6ezd9 rgw6ez3xr';\nexport var collectionName = 'rgw6ezd3 rgw6ezb9 rgw6eze3 rgw6ez8bh rgw6ez45l rgw6ez45r rgw6ez4bf';\nexport var grayscaleImage = '_1kuawc7';\nexport var icon = 'rgw6ez3xr';\nexport var priceChangeColumn = 'rgw6ez2p3 rgw6ez28l rgw6ezlf rgw6ezqx rgw6ez4ux rgw6ez3t3 rgw6ez4b9 rgw6ez7zp rgw6ez895 rgw6ez59f rgw6ez5yr rgw6ez1dr rgw6ez7zd';\nexport var priceChangeRow = 'rgw6ezd3 rgw6ezb9 rgw6eze3 rgw6ez4dr rgw6ez3sr';\nexport var unavailableAssetsContainer = 'rgw6ez2p3 rgw6ez28l rgw6ezlf rgw6ezqx rgw6ez4ux rgw6ez3tf rgw6ez4b9 rgw6ez7zp rgw6ez895 rgw6ez59f rgw6ez6df rgw6ez5yr rgw6ez1dr';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther as ethersFormatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/card/icons'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\n  <RemoveAssetOverlay onClick={onClick}>\n    <CircularCloseIcon />\n  </RemoveAssetOverlay>\n)\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"book\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const { formatEther, formatNumberOrString } = useFormatter()\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatEther({ input: assetEthPrice, type: NumberType.NFTToken })\n  const assetUSDPriceFormatted = formatNumberOrString({\n    input: usdPrice ? parseFloat(ethersFormatEther(assetEthPrice)) * usdPrice : usdPrice,\n    type: NumberType.FiatNFTToken,\n  })\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'neutral2' : 'neutral1'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const { formatEther } = useFormatter()\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'surface3' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatEther({\n          input: asset.priceInfo.ETHPrice,\n          type: NumberType.NFTToken,\n        })} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice?: number\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"surface1\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"neutral2\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"neutral2\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"neutral1\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","import { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent, Trace } from 'analytics'\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\nimport { Column } from 'nft/components/Flex'\nimport { useBag, useIsMobile, useNativeUsdPrice } from 'nft/hooks'\nimport { BagItemStatus, BagStatus } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useEffect, useMemo } from 'react'\n\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus)\n  const setBagStatus = useBag((s) => s.setBagStatus)\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\n  }, [uncheckedItemsInBag])\n\n  const ethUsdPrice = useNativeUsdPrice()\n\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\n      .map((item) => item.asset)\n    const priceChangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\n      .map((item) => item.asset)\n    const unavailableAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\n      .map((item) => item.asset)\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\n\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\n  }, [itemsInBag])\n\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0\n    const hasAssets = itemsInBag.length > 0\n\n    if (hasAssetsInReview)\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: ethUsdPrice,\n        bag_quantity: itemsInBag,\n        ...formatAssetEventProperties(priceChangedAssets),\n      })\n\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, ethUsdPrice])\n\n  return (\n    <>\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\n        {unavailableAssets.length > 0 && (\n          <Trace\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\n            properties={{\n              usd_value: ethUsdPrice,\n              bag_quantity: itemsInBag.length,\n              ...formatAssetEventProperties(unavailableAssets),\n            }}\n            shouldLogImpression\n          >\n            <UnavailableAssetsHeaderRow\n              assets={unavailableAssets}\n              usdPrice={ethUsdPrice}\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n              isMobile={isMobile}\n            />\n          </Trace>\n        )}\n        {priceChangedAssets.map((asset, index) => (\n          <PriceChangeBagRow\n            key={asset.id}\n            asset={asset}\n            usdPrice={ethUsdPrice}\n            markAssetAsReviewed={markAssetAsReviewed}\n            top={index === 0 && unavailableAssets.length === 0}\n            isMobile={isMobile}\n          />\n        ))}\n      </Column>\n      <Column>\n        {unchangedAssets\n          .slice(0)\n          .reverse()\n          .map((asset) => (\n            <BagRow\n              key={asset.id}\n              asset={asset}\n              usdPrice={ethUsdPrice}\n              removeAsset={removeAssetsFromBag}\n              showRemove={true}\n              isMobile={isMobile}\n            />\n          ))}\n      </Column>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { OpacityHoverState } from 'components/Common'\nimport { BagCloseIcon } from 'nft/components/icons'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { ButtonText, ThemedText } from 'theme/components'\n\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.neutral2};\n  cursor: pointer;\n  font-weight: 535;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.neutral1};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`\nconst CounterDot = styled.div<{ sizing: string }>`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accent1};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 28px;\n  text-align: center;\n`\ninterface BagHeaderProps {\n  numberOfAssets: number\n  closeBag: () => void\n  resetFlow: () => void\n  isProfilePage: boolean\n}\n\nconst BASE_SIZING = 17\nconst INCREMENTAL_SIZING = 6\n\nconst getCircleSizing = (numberOfAssets: number): string => {\n  const numberOfCharacters = numberOfAssets.toString().length\n\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\n}\n\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\n\n  return (\n    <Wrapper>\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\n      {numberOfAssets > 0 && (\n        <>\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\n          <ClearButton onClick={resetFlow}>\n            <Trans>Clear all</Trans>\n          </ClearButton>\n        </>\n      )}\n      <IconWrapper onClick={closeBag}>\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\n      </IconWrapper>\n    </Wrapper>\n  )\n}\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Center, Column } from 'nft/components/Flex'\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport styled from 'styled-components'\n\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`\n\nconst EmptyState = () => {\n  const isProfilePage = useIsNftProfilePage()\n\n  return (\n    <StyledColumn>\n      <Center>\n        {isProfilePage ? (\n          <LargeTagIcon color={themeVars.colors.neutral3} />\n        ) : (\n          <BagIcon color={themeVars.colors.neutral3} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\n        )}\n      </Center>\n      {isProfilePage ? (\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\n          No NFTs selected\n        </Center>\n      ) : (\n        <Column gap=\"16\">\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\n            Your bag is empty\n          </Center>\n          <Center fontSize=\"12\" fontWeight=\"book\" color=\"neutral2\" style={{ lineHeight: '16px' }}>\n            Selected NFTs will appear here\n          </Center>\n        </Column>\n      )}\n    </StyledColumn>\n  )\n}\n\nexport default EmptyState\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useState } from 'react'\n\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\nimport * as styles from '../BagRow.css'\n\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const isMobile = useIsMobile()\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    removeAsset(asset)\n  }\n\n  return (\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\n      <Box position=\"relative\" display=\"flex\">\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\n      </Box>\n      <Column overflow=\"hidden\" width=\"full\" color=\"neutral1\">\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\n        </Row>\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n        </Row>\n      </Column>\n      {hovered && !isMobile && (\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>\n      )}\n    </Row>\n  )\n}\n\nexport default ProfileAssetRow\n","import { Column } from 'nft/components/Flex'\nimport { useSellAsset } from 'nft/hooks'\n\nimport ProfileAssetRow from './ProfileAssetRow'\n\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  return (\n    <Column>\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\n    </Column>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent } from 'analytics'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column } from 'nft/components/Flex'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { useBag, useIsMobile, useProfilePageState, useSellAsset, useSubscribeScrollState } from 'nft/hooks'\nimport { BagStatus, ProfilePageStateType } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\nexport const BAG_WIDTH = 320\nexport const XXXL_BAG_WIDTH = 360\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.deprecated_shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ContinueButton = styled.div`\n  background: ${({ theme }) => theme.accent1};\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  margin: 32px 28px 16px;\n  padding: 10px 0px;\n  border-radius: 12px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 535;\n  line-height: 20px;\n  cursor: pointer;\n  transition: ${({ theme }) => theme.transition.duration.medium};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"24\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'surface3'}\n    borderBottomColor={top ? 'surface3' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { resetSellAssets, sellAssets } = useSellAsset(({ reset, sellAssets }) => ({\n    resetSellAssets: reset,\n    sellAssets,\n  }))\n\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState }) => ({ setProfilePageState }))\n\n  const { bagStatus, bagIsLocked, reset, bagExpanded, toggleBag, setBagExpanded } = useBag((state) => ({\n    ...state,\n    bagIsLocked: state.isLocked,\n    uncheckedItemsInBag: state.itemsInBag,\n  }))\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isModalOpen, setModalIsOpen] = useState(false)\n  const { userCanScroll, scrollRef, scrollProgress, scrollHandler } = useSubscribeScrollState()\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isModalOpen])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\n        <BagHeader\n          numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n          closeBag={handleCloseBag}\n          resetFlow={isProfilePage ? resetSellAssets : reset}\n          isProfilePage={isProfilePage}\n        />\n        {shouldRenderEmptyState && <EmptyState />}\n        <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n        <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n          {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n        </Column>\n        {hasAssetsToShow && !isProfilePage && (\n          <BagFooter setModalIsOpen={setModalIsOpen} eventProperties={eventProperties} />\n        )}\n        {isSellingAssets && isProfilePage && (\n          <ContinueButton\n            onClick={() => {\n              toggleBag()\n              setProfilePageState(ProfilePageStateType.LISTING)\n              sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n                list_quantity: sellAssets.length,\n                collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n                token_ids: sellAssets.map((asset) => asset.tokenId),\n              })\n            }}\n          >\n            <Trans>Continue</Trans>\n          </ContinueButton>\n        )}\n      </BagContainer>\n\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2ef rgw6ez2jx rgw6ez1yr rgw6ez8ct';\nexport var bagContainer = '_1jcz50r3 rgw6ez48r rgw6ez3f3 rgw6ez3iy rgw6ez16r rgw6ez1dr rgw6ez39l rgw6ez4qf rgw6ez7zx rgw6ez55f rgw6ez895 rgw6ez4b9';","import noop from 'utilities/src/react/noop'\n\nimport { Box } from '../Box'\nimport * as styles from './Overlay.css'\n\ninterface OverlayProps {\n  onClick?: () => void\n}\n\nexport const stopPropagation = (event: React.SyntheticEvent<HTMLElement>) => {\n  event.stopPropagation()\n  event.nativeEvent.stopImmediatePropagation()\n}\n\nexport const Overlay = ({ onClick = noop }: OverlayProps) => {\n  return <Box className={styles.overlay} onClick={onClick} />\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/modals/Overlay.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/modals/Overlay.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xOTlxZGw3MSB7CiAgb3BhY2l0eTogMC43MjsKICBvdmVyZmxvdzogaGlkZGVuOwogIHotaW5kZXg6IDEwMzg7Cn0=\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var overlay = '_199qdl71 rgw6ez3f3 rgw6ez343 rgw6ez17l rgw6ez1ef rgw6ez48r rgw6ez44l rgw6ez4u3';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { BagItemStatus } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { useBag } from './useBag'\n\nexport function useBagTotalEthPrice(): BigNumber {\n  const itemsInBag = useBag((state) => state.itemsInBag)\n\n  return useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n\n    return totalEthPrice\n  }, [itemsInBag])\n}\n\nexport function useBagTotalUsdPrice(): string | undefined {\n  const totalEthPrice = useBagTotalEthPrice()\n  const defaultCurrency = useCurrency('ETH')\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n\n  const usdcValue = useStablecoinValue(parsedOutputAmount)\n\n  return useMemo(() => {\n    return usdcValue?.toExact()\n  }, [usdcValue])\n}\n"],"names":["gql","getNextBagState","wishAssetsToBuy","route","purchasingWithErc20","hasPriceAdjustment","updatedAssets","compareAssetsWithTransactionRoute","shouldRefetchCalldata","unchanged","priceChanged","unavailable","filterUpdatedAssetsByState","hasAssets","length","hasAssetsInReview","hasUnavailableAssets","shouldReview","newBagItems","map","unavailableAsset","asset","status","BagItemStatus","UNAVAILABLE","changedAsset","REVIEWING_PRICE_CHANGE","unchangedAsset","REVIEWED","createBagFromUpdatedAssets","nextBagStatus","BagStatus","IN_REVIEW","CONFIRM_REVIEW","CONFIRM_QUOTE","CONFIRMING_IN_WALLET","ADDING_TO_BAG","evaluateNextBagState","buildRoutingItem","routingItem","action","RoutingActions","Buy","marketplace","toLowerCase","amountIn","price","value","assetIn","ETHPrice","baseAsset","currency","basePrice","baseDecimals","amountOut","amount","toString","assetOut","id","decimals","address","contractAddress","priceInfo","tokenType","tokenId","orderSource","buildRouteResponse","routeResponse","useErc20Token","valueToSend","undefined","sendAmount","data","calldata","to","toAddress","usePurchaseAssets","provider","useWeb3React","sendTransaction","useSendTransaction","state","setTransactionResponse","useTransactionResponse","setLocked","setBagLocked","setBagExpanded","reset","resetBag","useBag","useCallback","routingData","assetsToBuy","purchaseResponse","getSigner","bagExpanded","useTokenInput","createWithEqualityFn","devtools","set","inputCurrency","tokenTradeInput","setInputCurrency","clearInputCurrency","setTokenTradeInput","name","shallow","useFetchAssets","account","itemsInBag","uncheckedItemsInBag","setBagStatus","didOpenUnavailableAssets","setDidOpenUnavailableAssets","isLocked","bagIsLocked","setItemsInBag","useMemo","recalculateBagUsingPooledAssets","fetchGqlRoute","useNftRouteLazyQuery","purchaseAssets","resetStateBeforeFetch","FETCHING_ROUTE","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","nftRoute","filter","item","getPurchasableAssets","buildTradeRouteInput","swap","swapAmounts","inputAmount","outputAmount","quotient","token","isToken","chainId","isNative","pools","pool","isPool","pair","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","buildPool","usePayWithAnyTokenSwap","trade","allowance","allowedSlippage","hasRoutes","isClassicTrade","routes","hasInputAmount","hasAllowance","useEffect","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","swaps","protocol","Protocol","MIXED","push","V2","buildAllTradeRouteInputs","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","getBuyButtonStateData","buyButtonState","theme","handleClickOverride","usingPayWithAnyToken","priceImpact","defaultBuyButtonState","handleClick","buttonText","disabled","warningText","warningTextColor","deprecated_accentWarning","helperText","helperTextColor","neutral2","buttonColor","accent1","buttonTextColor","deprecated_accentTextLightPrimary","BuyButtonStates","WALLET_NOT_CONNECTED","NOT_SUPPORTED_CHAIN","INSUFFICIENT_BALANCE","ERROR","IN_WALLET_CONFIRMATION","PROCESSING_TRANSACTION","FETCHING_TOKEN_ROUTE","INVALID_TOKEN_ROUTE","NO_TOKEN_ROUTE_FOUND","surface3","neutral1","LOADING_ALLOWANCE","IN_WALLET_ALLOWANCE_APPROVAL","PROCESSING_APPROVAL","REQUIRE_APPROVAL","CONFIRM_UPDATED_PRICE","PRICE_IMPACT_HIGH","priceImpactSeverity","color","PAY","FooterContainer","styled","div","Footer","FooterHeader","Column","CurrencyRow","Row","TotalColumn","WarningIcon","AlertTriangle","WarningText","ThemedText","BodyPrimary","$color","HelperText","BodySmall","CurrencyInput","ActionButton","button","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","Warning","children","data-testid","fontSize","lineHeight","Helper","BAG_FOOTER_CURRENCY_SEARCH_FILTERS","onlyShowCurrenciesWithBalance","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","formatEther","formatNumberOrString","useFormatter","TradeState","LOADING","input","toExact","type","NumberType","NFTToken","fontWeight","symbol","FiatValue","usdcValue","MouseoverTooltip","text","size","style","displayPercentage","FiatNFTToken","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","FETCHING_FINAL_ROUTE","BagFooter","setModalIsOpen","eventProperties","toggleWalletDrawer","useToggleAccountDrawer","useTheme","connector","connected","Boolean","useBagTotalEthPrice","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","bagStatus","tokenSelectorOpen","setTokenSelectorOpen","useState","isPending","includes","ChainId","MAINNET","universalRouterAddress","universalRouterAddressIsLoading","loading","useNftUniversalRouterAddressQuery","fetchPolicy","useNftUniversalRouterAddress","transactionState","setTransactionState","setState","transactionStateRef","useRef","subscribe","current","TxStateType","Confirming","Denied","Invalid","WARNING","New","useSubscribeTransactionState","fetchAssets","parsedOutputAmount","tryParseCurrencyAmount","maximumAmountIn","useDebouncedTrade","TradeType","EXACT_OUTPUT","RouterPreference","API","useAutoSlippageTolerance","useDerivedPayWithAnyTokenSwapInfo","usePermit2Allowance","nftURAddress","UNIVERSAL_ROUTER_ADDRESS","isSupportedChain","getURAddress","TradeFillType","Classic","loadingAllowance","AllowanceState","formatPercent","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","critical","usePriceImpact","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","balance","balanceInEth","useWalletBalance","sufficientBalance","lessThan","parseEther","gte","switchChain","useSwitchChain","VALID","allowanceRequired","REQUIRED","approveAndPermit","isApprovalPending","isApprovalLoading","traceEventProperties","usd_value","using_erc20","gap","SubHeaderSmall","onClick","sendAnalyticsEvent","NFTEventName","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","HeadlineSmall","ChevronDown","TraceEvent","events","BrowserEvent","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","Loader","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","token_address","token_symbol","selectedCurrency","currencySearchFilters","dash","keyframes","Circle","circle","TimedLoader","Box","display","position","svg","height","width","strokeWidth","strokeLinecap","transform","transformOrigin","fill","r","cx","cy","assetName","bagRow","bagRowImage","collectionName","grayscaleImage","icon","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","CircularCloseIcon","NoContentContainer","background","className","styles","textAlign","left","top","br","BagRow","usdPrice","removeAsset","showRemove","grayscale","isMobile","loadedImage","setImageLoaded","noImageAvailable","setNoImageAvailable","smallImageUrl","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","parseFloat","ethersFormatEther","handleRemoveClick","e","preventDefault","stopPropagation","Link","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","as","src","alt","clsx","onLoad","onError","visibility","loadingBlock","overflow","whiteSpace","susFlag","Suspicious","collectionIsVerified","VerifiedIcon","emphasis","ButtonEmphasis","medium","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","BigNumber","from","gt","handleRemove","handleKeep","borderTopColor","SquareArrowUpIcon","SquareArrowDownIcon","marginLeft","marginRight","justifyContent","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","index","borderStyle","borderWidth","borderColor","borderRadius","zIndex","UnavailableAssetsHeaderRow","clearUnavailableAssets","toggleOpen","useReducer","s","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","marginBottom","cursor","bodySmall","slice","ChevronUpBagIcon","ChevronDownBagIcon","CloseTimerIcon","BagContent","removeAssetsFromBag","useIsMobile","ethUsdPrice","useNativeUsdPrice","unchangedAssets","priceChangedAssets","unavailableAssets","availableItems","ADDED_TO_BAG","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","Trace","reverse","ClearButton","ButtonText","IconWrapper","OpacityHoverState","CounterDot","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","getCircleSizing","BagCloseIcon","StyledColumn","useIsNftProfilePage","Center","LargeTagIcon","themeVars","colors","neutral3","BagIcon","subhead","useSellAsset","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","img","asset_contract","ProfileBagContent","sellAssets","ProfileAssetRow","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","surface1","deprecated_shallowShadow","raiseZIndex","Z_INDEX","modalOverTooltip","modalBackdrop","breakpoint","sm","xxxl","DetailsPageBackground","ContinueButton","transition","duration","opacity","hover","ScrollingIndicator","show","marginX","borderBottomColor","resetSellAssets","setProfilePageState","useProfilePageState","toggleBag","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","isModalOpen","userCanScroll","scrollRef","scrollProgress","scrollHandler","useSubscribeScrollState","handleCloseBag","manualClose","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","EmptyState","ref","onScroll","ProfilePageStateType","LISTING","NFT_PROFILE_PAGE_START_SELL","list_quantity","collection_addresses","token_ids","Overlay","event","nativeEvent","stopImmediatePropagation","noop","reduce","total","add","useBagTotalUsdPrice"],"sourceRoot":""}